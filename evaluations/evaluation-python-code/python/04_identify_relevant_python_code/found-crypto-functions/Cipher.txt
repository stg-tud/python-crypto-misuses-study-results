/media/ubuntu/DATA/repositories-python/nvbn__thefuck/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/item.py:		decryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/nvbn__thefuck/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/util.py:	encryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/nvbn__thefuck/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/nvbn__thefuck/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/nvbn__thefuck/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/nvbn__thefuck/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/nvbn__thefuck/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/nvbn__thefuck/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/nvbn__thefuck/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/nvbn__thefuck/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/ansible__ansible/lib/ansible/parsing/vault/__init__.py:        # creates a Cipher() with b_key1, a Mode.CTR() with b_iv, and a HMAC() with sign key b_key2
/media/ubuntu/DATA/repositories-python/ansible__ansible/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/ansible__ansible/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/ansible__ansible/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/ansible__ansible/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/ansible__ansible/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/ansible__ansible/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/ansible__ansible/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/ansible__ansible/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/ansible__ansible/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/ansible__ansible/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/ansible__ansible/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/ed25519key.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/ansible__ansible/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/transport.py:            cipher = Cipher(
/media/ubuntu/DATA/repositories-python/ansible__ansible/requirements_licma_analysis/ntlm_auth-1.5.0-py2.py3-none-any/ntlm_auth/rc4.py:        cipher = Cipher(algo, mode=None, backend=default_backend())
/media/ubuntu/DATA/repositories-python/apache__incubator-superset/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/apache__incubator-superset/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/apache__incubator-superset/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/apache__incubator-superset/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/apache__incubator-superset/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/apache__incubator-superset/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/apache__incubator-superset/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/apache__incubator-superset/requirements_licma_analysis/SQLAlchemy-Utils-0.36.1/SQLAlchemy-Utils-0.36.1/sqlalchemy_utils/types/encrypted/encrypted_type.py:        self.cipher = Cipher(
/media/ubuntu/DATA/repositories-python/apache__incubator-superset/requirements_licma_analysis/SQLAlchemy-Utils-0.36.1/SQLAlchemy-Utils-0.36.1/sqlalchemy_utils/types/encrypted/encrypted_type.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/apache__incubator-superset/requirements_licma_analysis/SQLAlchemy-Utils-0.36.1/SQLAlchemy-Utils-0.36.1/sqlalchemy_utils/types/encrypted/encrypted_type.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/item.py:		decryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/util.py:	encryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/ed25519key.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/certbot__certbot/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/transport.py:            cipher = Cipher(
/media/ubuntu/DATA/repositories-python/localstack__localstack/requirements_licma_analysis/moto_ext-1.3.15.25-py2.py3-none-any/moto/kms/utils.py:    encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/localstack__localstack/requirements_licma_analysis/moto_ext-1.3.15.25-py2.py3-none-any/moto/kms/utils.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/localstack__localstack/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/localstack__localstack/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/localstack__localstack/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/localstack__localstack/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/localstack__localstack/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/localstack__localstack/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/localstack__localstack/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/localstack__localstack/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/docker__compose/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/docker__compose/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/docker__compose/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/ed25519key.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/docker__compose/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/transport.py:            cipher = Cipher(
/media/ubuntu/DATA/repositories-python/docker__compose/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/docker__compose/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/docker__compose/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/docker__compose/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/docker__compose/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/docker__compose/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/docker__compose/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/docker__compose/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/tornadoweb__tornado/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/transport.py:        return Cipher(
/media/ubuntu/DATA/repositories-python/tornadoweb__tornado/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/transport.py:            Cipher(
/media/ubuntu/DATA/repositories-python/tornadoweb__tornado/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/tornadoweb__tornado/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/tornadoweb__tornado/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/tornadoweb__tornado/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/trailofbits__algo/requirements_licma_analysis/ansible-2.8.8/ansible-2.8.8/lib/ansible/parsing/vault/__init__.py:        # creates a Cipher() with b_key1, a Mode.CTR() with b_iv, and a HMAC() with sign key b_key2
/media/ubuntu/DATA/repositories-python/trailofbits__algo/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/trailofbits__algo/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/trailofbits__algo/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/trailofbits__algo/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/trailofbits__algo/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/trailofbits__algo/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/trailofbits__algo/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/trailofbits__algo/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/encode__django-rest-framework/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/item.py:		decryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/encode__django-rest-framework/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/util.py:	encryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/encode__django-rest-framework/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/encode__django-rest-framework/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/encode__django-rest-framework/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/encode__django-rest-framework/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/encode__django-rest-framework/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/encode__django-rest-framework/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/encode__django-rest-framework/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/encode__django-rest-framework/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/apache__airflow/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/item.py:		decryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/apache__airflow/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/util.py:	encryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/apache__airflow/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/apache__airflow/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/apache__airflow/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/apache__airflow/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/apache__airflow/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/apache__airflow/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/apache__airflow/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/apache__airflow/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/sherlock-project__sherlock/requirements_licma_analysis/stem-1.8.0/stem-1.8.0/stem/descriptor/hidden_service.py:  cipher = Cipher(algorithms.AES(secret_key), modes.CTR(secret_iv), default_backend())
/media/ubuntu/DATA/repositories-python/sherlock-project__sherlock/requirements_licma_analysis/stem-1.8.0/stem-1.8.0/stem/descriptor/hidden_service.py:      cipher = Cipher(algorithms.AES(authentication_cookie), modes.CTR(b'\x00' * len(iv)), default_backend())
/media/ubuntu/DATA/repositories-python/sherlock-project__sherlock/requirements_licma_analysis/stem-1.8.0/stem-1.8.0/stem/descriptor/hidden_service.py:      cipher = Cipher(algorithms.AES(session_key), modes.CTR(iv), default_backend())
/media/ubuntu/DATA/repositories-python/sherlock-project__sherlock/requirements_licma_analysis/stem-1.8.0/stem-1.8.0/stem/descriptor/hidden_service.py:    cipher = Cipher(algorithms.AES(authentication_cookie), modes.CTR(iv), default_backend())
/media/ubuntu/DATA/repositories-python/sherlock-project__sherlock/requirements_licma_analysis/stem-1.8.0/stem-1.8.0/stem/client/__init__.py:    self.forward_key = Cipher(algorithms.AES(kdf.forward_key), ctr, default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/sherlock-project__sherlock/requirements_licma_analysis/stem-1.8.0/stem-1.8.0/stem/client/__init__.py:    self.backward_key = Cipher(algorithms.AES(kdf.backward_key), ctr, default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/python-telegram-bot__python-telegram-bot/telegram/passport/credentials.py:    cipher = Cipher(AES(key), CBC(iv), backend=default_backend())
/media/ubuntu/DATA/repositories-python/python-telegram-bot__python-telegram-bot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/python-telegram-bot__python-telegram-bot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/python-telegram-bot__python-telegram-bot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/python-telegram-bot__python-telegram-bot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/python-telegram-bot__python-telegram-bot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/python-telegram-bot__python-telegram-bot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/python-telegram-bot__python-telegram-bot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/python-telegram-bot__python-telegram-bot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/python-poetry__poetry/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/python-poetry__poetry/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/python-poetry__poetry/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/ed25519key.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/python-poetry__poetry/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/transport.py:            cipher = Cipher(
/media/ubuntu/DATA/repositories-python/python-poetry__poetry/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/python-poetry__poetry/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/python-poetry__poetry/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/python-poetry__poetry/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/python-poetry__poetry/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/python-poetry__poetry/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/python-poetry__poetry/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/python-poetry__poetry/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/timgrossmann__InstaPy/requirements_licma_analysis/python_telegram_bot-12.8-py2.py3-none-any/telegram/passport/credentials.py:    cipher = Cipher(AES(key), CBC(iv), backend=default_backend())
/media/ubuntu/DATA/repositories-python/timgrossmann__InstaPy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/timgrossmann__InstaPy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/timgrossmann__InstaPy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/timgrossmann__InstaPy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/timgrossmann__InstaPy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/timgrossmann__InstaPy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/timgrossmann__InstaPy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/timgrossmann__InstaPy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/sovereign__sovereign/requirements_licma_analysis/ansible-2.6.20/ansible-2.6.20/lib/ansible/parsing/vault/__init__.py:        # creates a Cipher() with b_key1, a Mode.CTR() with b_iv, and a HMAC() with sign key b_key2
/media/ubuntu/DATA/repositories-python/sovereign__sovereign/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/sovereign__sovereign/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/sovereign__sovereign/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/ed25519key.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/sovereign__sovereign/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/transport.py:            cipher = Cipher(
/media/ubuntu/DATA/repositories-python/sovereign__sovereign/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/sovereign__sovereign/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/sovereign__sovereign/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/sovereign__sovereign/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/sovereign__sovereign/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/sovereign__sovereign/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/sovereign__sovereign/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/sovereign__sovereign/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/sovereign__sovereign/requirements_licma_analysis/ansible-2.9.11/ansible-2.9.11/lib/ansible/parsing/vault/__init__.py:        # creates a Cipher() with b_key1, a Mode.CTR() with b_iv, and a HMAC() with sign key b_key2
/media/ubuntu/DATA/repositories-python/mirumee__saleor/requirements_licma_analysis/graphene-federation-0.1.0/graphene-federation-0.1.0/graphene_federation/venv/lib64/python3.6/site-packages/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/mirumee__saleor/requirements_licma_analysis/graphene-federation-0.1.0/graphene-federation-0.1.0/graphene_federation/venv/lib64/python3.6/site-packages/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/mirumee__saleor/requirements_licma_analysis/graphene-federation-0.1.0/graphene-federation-0.1.0/graphene_federation/venv/lib64/python3.6/site-packages/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/mirumee__saleor/requirements_licma_analysis/graphene-federation-0.1.0/graphene-federation-0.1.0/graphene_federation/venv/lib64/python3.6/site-packages/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/mirumee__saleor/requirements_licma_analysis/graphene-federation-0.1.0/graphene-federation-0.1.0/graphene_federation/venv/lib64/python3.6/site-packages/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/mirumee__saleor/requirements_licma_analysis/graphene-federation-0.1.0/graphene-federation-0.1.0/graphene_federation/venv/lib64/python3.6/site-packages/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/mirumee__saleor/requirements_licma_analysis/graphene-federation-0.1.0/graphene-federation-0.1.0/graphene_federation/venv/lib64/python3.6/site-packages/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/mirumee__saleor/requirements_licma_analysis/graphene-federation-0.1.0/graphene-federation-0.1.0/graphene_federation/venv/lib64/python3.6/site-packages/secretstorage/item.py:		decryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/mirumee__saleor/requirements_licma_analysis/graphene-federation-0.1.0/graphene-federation-0.1.0/graphene_federation/venv/lib64/python3.6/site-packages/secretstorage/util.py:	encryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/mirumee__saleor/requirements_licma_analysis/graphene-federation-0.1.0/graphene-federation-0.1.0/graphene_federation/venv/lib/python3.6/site-packages/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/mirumee__saleor/requirements_licma_analysis/graphene-federation-0.1.0/graphene-federation-0.1.0/graphene_federation/venv/lib/python3.6/site-packages/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/mirumee__saleor/requirements_licma_analysis/graphene-federation-0.1.0/graphene-federation-0.1.0/graphene_federation/venv/lib/python3.6/site-packages/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/mirumee__saleor/requirements_licma_analysis/graphene-federation-0.1.0/graphene-federation-0.1.0/graphene_federation/venv/lib/python3.6/site-packages/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/mirumee__saleor/requirements_licma_analysis/graphene-federation-0.1.0/graphene-federation-0.1.0/graphene_federation/venv/lib/python3.6/site-packages/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/mirumee__saleor/requirements_licma_analysis/graphene-federation-0.1.0/graphene-federation-0.1.0/graphene_federation/venv/lib/python3.6/site-packages/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/mirumee__saleor/requirements_licma_analysis/graphene-federation-0.1.0/graphene-federation-0.1.0/graphene_federation/venv/lib/python3.6/site-packages/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/mirumee__saleor/requirements_licma_analysis/graphene-federation-0.1.0/graphene-federation-0.1.0/graphene_federation/venv/lib/python3.6/site-packages/secretstorage/item.py:		decryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/mirumee__saleor/requirements_licma_analysis/graphene-federation-0.1.0/graphene-federation-0.1.0/graphene_federation/venv/lib/python3.6/site-packages/secretstorage/util.py:	encryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/transport.py:        return Cipher(
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/transport.py:            Cipher(
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/Twisted-19.2.1/Twisted-19.2.1/src/twisted/conch/ssh/transport.py:        return Cipher(
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/Twisted-19.2.1/Twisted-19.2.1/src/twisted/conch/ssh/transport.py:            Cipher(
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/Twisted-19.2.1/Twisted-19.2.1/src/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/Twisted-19.2.1/Twisted-19.2.1/src/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/scrapinghub__portia/requirements_licma_analysis/Twisted-19.2.1/Twisted-19.2.1/src/twisted/conch/ssh/keys.py:                encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/MagicStack__uvloop/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/MagicStack__uvloop/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/MagicStack__uvloop/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/MagicStack__uvloop/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/MagicStack__uvloop/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/MagicStack__uvloop/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/MagicStack__uvloop/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/MagicStack__uvloop/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/MagicStack__uvloop/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/item.py:		decryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/MagicStack__uvloop/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/util.py:	encryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/pyinstaller__pyinstaller/PyInstaller/loader/pyimod02_archive.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/pyinstaller__pyinstaller/PyInstaller/loader/pyimod02_archive.py:            self.cipher = Cipher()
/media/ubuntu/DATA/repositories-python/Gallopsled__pwntools/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/Gallopsled__pwntools/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/Gallopsled__pwntools/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/ed25519key.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/Gallopsled__pwntools/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/transport.py:            cipher = Cipher(
/media/ubuntu/DATA/repositories-python/Gallopsled__pwntools/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/Gallopsled__pwntools/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/Gallopsled__pwntools/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/Gallopsled__pwntools/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/Gallopsled__pwntools/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/Gallopsled__pwntools/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/Gallopsled__pwntools/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/Gallopsled__pwntools/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/boto__boto/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/boto__boto/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/boto__boto/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/ed25519key.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/boto__boto/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/transport.py:            cipher = Cipher(
/media/ubuntu/DATA/repositories-python/boto__boto/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/boto__boto/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/boto__boto/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/boto__boto/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/boto__boto/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/boto__boto/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/boto__boto/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/boto__boto/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/asciimoo__searx/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/asciimoo__searx/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/asciimoo__searx/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/asciimoo__searx/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/asciimoo__searx/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/asciimoo__searx/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/asciimoo__searx/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/asciimoo__searx/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/paramiko__paramiko/paramiko/ed25519key.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/paramiko__paramiko/paramiko/pkey.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/paramiko__paramiko/paramiko/pkey.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/paramiko__paramiko/paramiko/transport.py:            cipher = Cipher(
/media/ubuntu/DATA/repositories-python/paramiko__paramiko/tests/test_packetizer.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/paramiko__paramiko/tests/test_packetizer.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/paramiko__paramiko/tests/test_packetizer.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/tgalal__yowsup/yowsup/layers/protocol_media/mediacipher.py:        cipher_encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/tgalal__yowsup/yowsup/layers/protocol_media/mediacipher.py:        cipher_decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/deis__deis/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/deis__deis/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/deis__deis/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/deis__deis/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/deis__deis/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/deis__deis/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/deis__deis/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/deis__deis/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/ajenti__ajenti/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/ajenti__ajenti/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/ajenti__ajenti/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/ajenti__ajenti/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/ajenti__ajenti/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/ajenti__ajenti/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/ajenti__ajenti/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/ajenti__ajenti/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/MobSF__Mobile-Security-Framework-MobSF/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/MobSF__Mobile-Security-Framework-MobSF/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/MobSF__Mobile-Security-Framework-MobSF/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/MobSF__Mobile-Security-Framework-MobSF/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/MobSF__Mobile-Security-Framework-MobSF/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/MobSF__Mobile-Security-Framework-MobSF/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/MobSF__Mobile-Security-Framework-MobSF/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/crazyguitar__pysheeet/docs/notes/python-security.rst:        cipher = Cipher(alg, mode, backend=backend)
/media/ubuntu/DATA/repositories-python/crazyguitar__pysheeet/docs/notes/python-security.rst:        cipher = Cipher(alg, mode, backend=backend)
/media/ubuntu/DATA/repositories-python/crazyguitar__pysheeet/docs/notes/python-security.rst:        cipher = Cipher(alg, mode, backend=backend)
/media/ubuntu/DATA/repositories-python/crazyguitar__pysheeet/docs/notes/python-security.rst:        cipher = Cipher(alg, mode, backend=backend)
/media/ubuntu/DATA/repositories-python/readthedocs__readthedocs.org/requirements_licma_analysis/azure_storage_common-2.1.0-py2.py3-none-any/azure/storage/common/_encryption.py:    return Cipher(algorithm, mode, backend)
/media/ubuntu/DATA/repositories-python/readthedocs__readthedocs.org/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/readthedocs__readthedocs.org/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/readthedocs__readthedocs.org/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/readthedocs__readthedocs.org/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/readthedocs__readthedocs.org/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/readthedocs__readthedocs.org/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/readthedocs__readthedocs.org/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/readthedocs__readthedocs.org/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/jupyterhub__jupyterhub/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/jupyterhub__jupyterhub/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/jupyterhub__jupyterhub/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/jupyterhub__jupyterhub/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/jupyterhub__jupyterhub/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/jupyterhub__jupyterhub/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/jupyterhub__jupyterhub/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/jupyterhub__jupyterhub/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/AlessandroZ__LaZagne/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/item.py:		decryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/AlessandroZ__LaZagne/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/util.py:	encryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/AlessandroZ__LaZagne/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/AlessandroZ__LaZagne/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/AlessandroZ__LaZagne/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/AlessandroZ__LaZagne/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/AlessandroZ__LaZagne/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/AlessandroZ__LaZagne/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/AlessandroZ__LaZagne/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/AlessandroZ__LaZagne/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/trustedsec__social-engineer-toolkit/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/trustedsec__social-engineer-toolkit/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/trustedsec__social-engineer-toolkit/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/trustedsec__social-engineer-toolkit/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/trustedsec__social-engineer-toolkit/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/trustedsec__social-engineer-toolkit/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/trustedsec__social-engineer-toolkit/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/trustedsec__social-engineer-toolkit/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/taigaio__taiga-back/requirements_licma_analysis/cryptography-2.3.1-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/taigaio__taiga-back/requirements_licma_analysis/cryptography-2.3.1-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/taigaio__taiga-back/requirements_licma_analysis/cryptography-2.3.1-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/taigaio__taiga-back/requirements_licma_analysis/cryptography-2.3.1-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/taigaio__taiga-back/requirements_licma_analysis/cryptography-2.3.1-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/taigaio__taiga-back/requirements_licma_analysis/cryptography-2.3.1-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/taigaio__taiga-back/requirements_licma_analysis/cryptography-2.3.1-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/secdev__scapy/scapy/contrib/macsec.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/secdev__scapy/scapy/contrib/macsec.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/secdev__scapy/scapy/layers/dot11.py:            d = Cipher(
/media/ubuntu/DATA/repositories-python/secdev__scapy/scapy/layers/dot11.py:            e = Cipher(
/media/ubuntu/DATA/repositories-python/secdev__scapy/scapy/layers/ipsec.py:            return Cipher(
/media/ubuntu/DATA/repositories-python/secdev__scapy/scapy/layers/ipsec.py:            return Cipher(
/media/ubuntu/DATA/repositories-python/secdev__scapy/scapy/layers/tls/crypto/cipher_aead.py:                self._cipher = Cipher(self.pc_cls(key),
/media/ubuntu/DATA/repositories-python/secdev__scapy/scapy/layers/tls/crypto/cipher_aead.py:                self._cipher = Cipher(self.pc_cls(key),
/media/ubuntu/DATA/repositories-python/secdev__scapy/scapy/layers/tls/crypto/cipher_aead.py:                self._cipher = Cipher(self.pc_cls(key),
/media/ubuntu/DATA/repositories-python/secdev__scapy/scapy/layers/tls/crypto/cipher_aead.py:                self._cipher = Cipher(self.pc_cls(key),
/media/ubuntu/DATA/repositories-python/secdev__scapy/scapy/layers/tls/crypto/cipher_block.py:        self._cipher = Cipher(self.pc_cls(key),
/media/ubuntu/DATA/repositories-python/secdev__scapy/scapy/layers/tls/crypto/cipher_stream.py:        self._cipher = Cipher(self.pc_cls(key),
/media/ubuntu/DATA/repositories-python/secdev__scapy/scapy/modules/krack/crypto.py:    cipher = Cipher(algorithm, mode=None, backend=default_backend())
/media/ubuntu/DATA/repositories-python/injetlee__Python/requirements_licma_analysis/wechatpy-1.7.0-py2.py3-none-any/wechatpy/crypto/cryptography.py:        self.cipher = Cipher(
/media/ubuntu/DATA/repositories-python/iterative__dvc/requirements_licma_analysis/PyInstaller-3.5/PyInstaller-3.5/PyInstaller/loader/pyimod02_archive.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/iterative__dvc/requirements_licma_analysis/PyInstaller-3.5/PyInstaller-3.5/PyInstaller/loader/pyimod02_archive.py:            self.cipher = Cipher()
/media/ubuntu/DATA/repositories-python/edx__edx-platform/lms/djangoapps/discussion/notification_prefs/views.py:        return Cipher(AES(hash_.digest()), CBC(initialization_vector), backend=default_backend())
/media/ubuntu/DATA/repositories-python/edx__edx-platform/lms/djangoapps/verify_student/ssencrypt.py:    return Cipher(AES(key), CBC(generate_aes_iv(key)), backend=default_backend())
/media/ubuntu/DATA/repositories-python/FeatureLabs__featuretools/requirements_licma_analysis/moto-1.3.14-py2.py3-none-any/moto/kms/utils.py:    encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/FeatureLabs__featuretools/requirements_licma_analysis/moto-1.3.14-py2.py3-none-any/moto/kms/utils.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/FeatureLabs__featuretools/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/FeatureLabs__featuretools/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/FeatureLabs__featuretools/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/FeatureLabs__featuretools/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/FeatureLabs__featuretools/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/FeatureLabs__featuretools/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/FeatureLabs__featuretools/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/FeatureLabs__featuretools/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/docker__docker-py/requirements_licma_analysis/cryptography-2.3-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/docker__docker-py/requirements_licma_analysis/cryptography-2.3-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/docker__docker-py/requirements_licma_analysis/cryptography-2.3-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/docker__docker-py/requirements_licma_analysis/cryptography-2.3-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/docker__docker-py/requirements_licma_analysis/cryptography-2.3-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/docker__docker-py/requirements_licma_analysis/cryptography-2.3-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/docker__docker-py/requirements_licma_analysis/cryptography-2.3-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/docker__docker-py/requirements_licma_analysis/paramiko-2.4.2-py2.py3-none-any/paramiko/ed25519key.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/docker__docker-py/requirements_licma_analysis/paramiko-2.4.2-py2.py3-none-any/paramiko/pkey.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/docker__docker-py/requirements_licma_analysis/paramiko-2.4.2-py2.py3-none-any/paramiko/transport.py:            cipher = Cipher(
/media/ubuntu/DATA/repositories-python/SecureAuthCorp__impacket/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/SecureAuthCorp__impacket/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/SecureAuthCorp__impacket/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/SecureAuthCorp__impacket/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/SecureAuthCorp__impacket/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/SecureAuthCorp__impacket/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/SecureAuthCorp__impacket/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/SecureAuthCorp__impacket/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/PaddlePaddle__models/requirements_licma_analysis/rarfile-3.1/rarfile-3.1/test/test_crypto.py:        ciph = Cipher(algorithms.AES(key), modes.CBC(iv), default_backend())
/media/ubuntu/DATA/repositories-python/PaddlePaddle__models/requirements_licma_analysis/rarfile-3.1/rarfile-3.1/rarfile.py:                ciph = Cipher(algorithms.AES(key), modes.CBC(iv), default_backend())
/media/ubuntu/DATA/repositories-python/rmax__scrapy-redis/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/transport.py:        return Cipher(
/media/ubuntu/DATA/repositories-python/rmax__scrapy-redis/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/transport.py:            Cipher(
/media/ubuntu/DATA/repositories-python/rmax__scrapy-redis/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/rmax__scrapy-redis/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/rmax__scrapy-redis/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/rmax__scrapy-redis/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/smicallef__spiderfoot/requirements_licma_analysis/stem-1.8.0/stem-1.8.0/stem/descriptor/hidden_service.py:  cipher = Cipher(algorithms.AES(secret_key), modes.CTR(secret_iv), default_backend())
/media/ubuntu/DATA/repositories-python/smicallef__spiderfoot/requirements_licma_analysis/stem-1.8.0/stem-1.8.0/stem/descriptor/hidden_service.py:      cipher = Cipher(algorithms.AES(authentication_cookie), modes.CTR(b'\x00' * len(iv)), default_backend())
/media/ubuntu/DATA/repositories-python/smicallef__spiderfoot/requirements_licma_analysis/stem-1.8.0/stem-1.8.0/stem/descriptor/hidden_service.py:      cipher = Cipher(algorithms.AES(session_key), modes.CTR(iv), default_backend())
/media/ubuntu/DATA/repositories-python/smicallef__spiderfoot/requirements_licma_analysis/stem-1.8.0/stem-1.8.0/stem/descriptor/hidden_service.py:    cipher = Cipher(algorithms.AES(authentication_cookie), modes.CTR(iv), default_backend())
/media/ubuntu/DATA/repositories-python/smicallef__spiderfoot/requirements_licma_analysis/stem-1.8.0/stem-1.8.0/stem/client/__init__.py:    self.forward_key = Cipher(algorithms.AES(kdf.forward_key), ctr, default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/smicallef__spiderfoot/requirements_licma_analysis/stem-1.8.0/stem-1.8.0/stem/client/__init__.py:    self.backward_key = Cipher(algorithms.AES(kdf.backward_key), ctr, default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/smicallef__spiderfoot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/smicallef__spiderfoot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/smicallef__spiderfoot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/smicallef__spiderfoot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/smicallef__spiderfoot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/smicallef__spiderfoot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/smicallef__spiderfoot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/smicallef__spiderfoot/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/lbryio__lbry-sdk/lbry/blob/blob_file.py:    cipher = Cipher(AES(key), modes.CBC(iv), backend=BACKEND)
/media/ubuntu/DATA/repositories-python/lbryio__lbry-sdk/lbry/blob/blob_file.py:    cipher = Cipher(AES(key), modes.CBC(iv), backend=BACKEND)
/media/ubuntu/DATA/repositories-python/lbryio__lbry-sdk/lbry/crypto/crypt.py:    encryptor = Cipher(AES(key), modes.CBC(init_vector), default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/lbryio__lbry-sdk/lbry/crypto/crypt.py:        decryptor = Cipher(AES(key), modes.CBC(init_vector), default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/lbryio__lbry-sdk/lbry/crypto/crypt.py:    encryptor = Cipher(AES(key), modes.CBC(init_vector), default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/lbryio__lbry-sdk/lbry/crypto/crypt.py:        decryptor = Cipher(AES(key), modes.CBC(init_vector), default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/SpiderClub__haipproxy/requirements_licma_analysis/Twisted-17.9.0/Twisted-17.9.0/src/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/SpiderClub__haipproxy/requirements_licma_analysis/Twisted-17.9.0/Twisted-17.9.0/src/twisted/conch/ssh/keys.py:                encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/SpiderClub__haipproxy/requirements_licma_analysis/Twisted-17.9.0/Twisted-17.9.0/src/twisted/conch/ssh/transport.py:        return Cipher(
/media/ubuntu/DATA/repositories-python/SpiderClub__haipproxy/requirements_licma_analysis/Twisted-17.9.0/Twisted-17.9.0/src/twisted/conch/ssh/transport.py:            Cipher(
/media/ubuntu/DATA/repositories-python/SpiderClub__haipproxy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/SpiderClub__haipproxy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/SpiderClub__haipproxy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/SpiderClub__haipproxy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/SpiderClub__haipproxy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/SpiderClub__haipproxy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/SpiderClub__haipproxy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/SpiderClub__haipproxy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/deepmipt__DeepPavlov/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/deepmipt__DeepPavlov/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/deepmipt__DeepPavlov/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/deepmipt__DeepPavlov/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/deepmipt__DeepPavlov/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/deepmipt__DeepPavlov/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/deepmipt__DeepPavlov/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/deepmipt__DeepPavlov/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/jrnl-org__jrnl/jrnl/EncryptedJournal.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/flask-admin__flask-admin/requirements_licma_analysis/SQLAlchemy-Utils-0.36.8/SQLAlchemy-Utils-0.36.8/sqlalchemy_utils/types/encrypted/encrypted_type.py:        self.cipher = Cipher(
/media/ubuntu/DATA/repositories-python/flask-admin__flask-admin/requirements_licma_analysis/SQLAlchemy-Utils-0.36.8/SQLAlchemy-Utils-0.36.8/sqlalchemy_utils/types/encrypted/encrypted_type.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/flask-admin__flask-admin/requirements_licma_analysis/SQLAlchemy-Utils-0.36.8/SQLAlchemy-Utils-0.36.8/sqlalchemy_utils/types/encrypted/encrypted_type.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/google__clusterfuzz/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/transport.py:        return Cipher(
/media/ubuntu/DATA/repositories-python/google__clusterfuzz/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/transport.py:            Cipher(
/media/ubuntu/DATA/repositories-python/google__clusterfuzz/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/google__clusterfuzz/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/google__clusterfuzz/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/google__clusterfuzz/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/google__clusterfuzz/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/google__clusterfuzz/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/google__clusterfuzz/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/google__clusterfuzz/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/google__clusterfuzz/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/google__clusterfuzz/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/google__clusterfuzz/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/google__clusterfuzz/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/docs/hazmat/primitives/symmetric-encryption.rst:.. class:: Cipher(algorithm, mode, backend)
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/docs/hazmat/primitives/symmetric-encryption.rst:        >>> cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/docs/hazmat/primitives/symmetric-encryption.rst:        >>> cipher = Cipher(algorithm, mode=None, backend=default_backend())
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/docs/hazmat/primitives/symmetric-encryption.rst:        >>> cipher = Cipher(algorithm, mode=None, backend=default_backend())
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/docs/hazmat/primitives/symmetric-encryption.rst:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/docs/hazmat/primitives/symmetric-encryption.rst:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/docs/hazmat/primitives/symmetric-encryption.rst:            >>> cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/src/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/src/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/src/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/src/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/src/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/src/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/src/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/backends/test_openssl.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/backends/test_openssl.py:        cipher = Cipher(AES(b"\0" * 16), CBC(b"\0" * 16), backend=backend)
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/test_block.py:            Cipher(algorithm, mode=None, backend=backend)
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/test_block.py:            Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/test_block.py:            Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/test_block.py:            Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/test_block.py:            Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/test_block.py:            Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/test_chacha20.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/test_chacha20.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/utils.py:    cipher = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/utils.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/utils.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/utils.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/utils.py:    cipher = Cipher(cipher_factory(**params), None, backend=backend)
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/utils.py:    cipher = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/utils.py:    cipher = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/utils.py:    cipher = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/hazmat/primitives/utils.py:    cipher = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/wycheproof/test_aes.py:    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend)
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/wycheproof/test_aes.py:        enc = Cipher(algorithms.AES(key), modes.GCM(iv), backend).encryptor()
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/wycheproof/test_aes.py:        dec = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/wycheproof/test_aes.py:            Cipher(algorithms.AES(key), modes.GCM(iv), backend)
/media/ubuntu/DATA/repositories-python/cloudera__hue/desktop/core/ext-py/cryptography-2.9/tests/wycheproof/test_aes.py:        dec = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/cloudera__hue/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/cloudera__hue/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/cloudera__hue/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/cloudera__hue/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/cloudera__hue/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cloudera__hue/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/cloudera__hue/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/cloudera__hue/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/cloudera__hue/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/cloudera__hue/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/cloudera__hue/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/cloudera__hue/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/item.py:		decryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/cloudera__hue/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/util.py:	encryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/stewartmcgown__uds/requirements_licma_analysis/cryptography-2.3.1-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/stewartmcgown__uds/requirements_licma_analysis/cryptography-2.3.1-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/stewartmcgown__uds/requirements_licma_analysis/cryptography-2.3.1-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/stewartmcgown__uds/requirements_licma_analysis/cryptography-2.3.1-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/stewartmcgown__uds/requirements_licma_analysis/cryptography-2.3.1-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/stewartmcgown__uds/requirements_licma_analysis/cryptography-2.3.1-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/stewartmcgown__uds/requirements_licma_analysis/cryptography-2.3.1-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/twisted__twisted/src/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/twisted__twisted/src/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/twisted__twisted/src/twisted/conch/ssh/keys.py:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/twisted__twisted/src/twisted/conch/ssh/keys.py:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/twisted__twisted/src/twisted/conch/ssh/transport.py:        return Cipher(
/media/ubuntu/DATA/repositories-python/twisted__twisted/src/twisted/conch/ssh/transport.py:            Cipher(
/media/ubuntu/DATA/repositories-python/django-crispy-forms__django-crispy-forms/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/item.py:		decryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/django-crispy-forms__django-crispy-forms/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/util.py:	encryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/django-crispy-forms__django-crispy-forms/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/django-crispy-forms__django-crispy-forms/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/django-crispy-forms__django-crispy-forms/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/django-crispy-forms__django-crispy-forms/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/django-crispy-forms__django-crispy-forms/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/django-crispy-forms__django-crispy-forms/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/django-crispy-forms__django-crispy-forms/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/django-crispy-forms__django-crispy-forms/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/Kinto__kinto/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/item.py:		decryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/Kinto__kinto/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/util.py:	encryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/Kinto__kinto/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/Kinto__kinto/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/Kinto__kinto/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/Kinto__kinto/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/Kinto__kinto/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/Kinto__kinto/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/Kinto__kinto/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/Kinto__kinto/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/fastmonkeys__stellar/requirements_licma_analysis/SQLAlchemy-Utils-0.36.8/SQLAlchemy-Utils-0.36.8/sqlalchemy_utils/types/encrypted/encrypted_type.py:        self.cipher = Cipher(
/media/ubuntu/DATA/repositories-python/fastmonkeys__stellar/requirements_licma_analysis/SQLAlchemy-Utils-0.36.8/SQLAlchemy-Utils-0.36.8/sqlalchemy_utils/types/encrypted/encrypted_type.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/fastmonkeys__stellar/requirements_licma_analysis/SQLAlchemy-Utils-0.36.8/SQLAlchemy-Utils-0.36.8/sqlalchemy_utils/types/encrypted/encrypted_type.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__CrackMapExec/requirements_licma_analysis/cryptography-2.9-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__CrackMapExec/requirements_licma_analysis/cryptography-2.9-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__CrackMapExec/requirements_licma_analysis/cryptography-2.9-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__CrackMapExec/requirements_licma_analysis/cryptography-2.9-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__CrackMapExec/requirements_licma_analysis/cryptography-2.9-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__CrackMapExec/requirements_licma_analysis/cryptography-2.9-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__CrackMapExec/requirements_licma_analysis/cryptography-2.9-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__CrackMapExec/requirements_licma_analysis/ntlm_auth-1.4.0-py2.py3-none-any/ntlm_auth/rc4.py:        cipher = Cipher(algo, mode=None, backend=default_backend())
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__CrackMapExec/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__CrackMapExec/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__CrackMapExec/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/ed25519key.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__CrackMapExec/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/transport.py:            cipher = Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__CrackMapExec/requirements_licma_analysis/pypsrp-0.4.0-py2.py3-none-any/pypsrp/powershell.py:        cipher = Cipher(algorithm, mode, default_backend())
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__CrackMapExec/requirements_licma_analysis/minikerberos-0.2.3-py3-none-any/minikerberos/crypto/RC4.py:		self._cipher = Cipher(algorithm, mode=None, backend=default_backend())
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__CrackMapExec/requirements_licma_analysis/msldap-0.3.11-py3-none-any/msldap/crypto/AES.py:		self._cipher = Cipher(algorithm, mode=self.IV, backend=default_backend())
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__CrackMapExec/requirements_licma_analysis/msldap-0.3.11-py3-none-any/msldap/crypto/RC4.py:		self._cipher = Cipher(algorithm, mode=None, backend=default_backend())
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__CrackMapExec/requirements_licma_analysis/msldap-0.3.11-py3-none-any/msldap/crypto/TDES.py:		self._cipher = Cipher(algorithm, mode=self.IV, backend=default_backend())
/media/ubuntu/DATA/repositories-python/jarun__buku/buku:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/jarun__buku/buku:                decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/jarun__buku/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/jarun__buku/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/jarun__buku/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/jarun__buku/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/jarun__buku/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/jarun__buku/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/jarun__buku/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/jarun__buku/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/offu__WeRoBot/werobot/crypto/__init__.py:        self.cipher = Cipher(
/media/ubuntu/DATA/repositories-python/offu__WeRoBot/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/offu__WeRoBot/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/offu__WeRoBot/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/offu__WeRoBot/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/offu__WeRoBot/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/offu__WeRoBot/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/offu__WeRoBot/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/spulec__moto/moto/kms/utils.py:    encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/spulec__moto/moto/kms/utils.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/QUANTAXIS__QUANTAXIS/QUANTAXIS/QAMarket/QATTSBroker.py:            self._cipher = Cipher(
/media/ubuntu/DATA/repositories-python/QUANTAXIS__QUANTAXIS/requirements_licma_analysis/tushare-1.2.60-py3-none-any/pytdx/trade/trade.py:            self._cipher = Cipher(algorithms.AES(enc_key), modes.CBC(enc_iv), backend=backend)
/media/ubuntu/DATA/repositories-python/QUANTAXIS__QUANTAXIS/requirements_licma_analysis/pytdx-1.72/pytdx-1.72/pytdx/trade/trade.py:            self._cipher = Cipher(algorithms.AES(enc_key), modes.CBC(enc_iv), backend=backend)
/media/ubuntu/DATA/repositories-python/QUANTAXIS__QUANTAXIS/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/QUANTAXIS__QUANTAXIS/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/QUANTAXIS__QUANTAXIS/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/QUANTAXIS__QUANTAXIS/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/QUANTAXIS__QUANTAXIS/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/QUANTAXIS__QUANTAXIS/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/QUANTAXIS__QUANTAXIS/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/QUANTAXIS__QUANTAXIS/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/QUANTAXIS__QUANTAXIS/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/transport.py:        return Cipher(
/media/ubuntu/DATA/repositories-python/QUANTAXIS__QUANTAXIS/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/transport.py:            Cipher(
/media/ubuntu/DATA/repositories-python/QUANTAXIS__QUANTAXIS/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/QUANTAXIS__QUANTAXIS/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/QUANTAXIS__QUANTAXIS/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/QUANTAXIS__QUANTAXIS/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/google__grr/grr/core/grr_response_core/lib/communicator.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/google__grr/grr/core/grr_response_core/lib/communicator.py:    self.server_cipher = Cipher(self.common_name, self.private_key,
/media/ubuntu/DATA/repositories-python/google__grr/grr/core/grr_response_core/lib/communicator.py:      cipher = Cipher(self.common_name, self.private_key, remote_public_key)
/media/ubuntu/DATA/repositories-python/eudicots__Cactus/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/item.py:		decryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/eudicots__Cactus/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/util.py:	encryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/eudicots__Cactus/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/eudicots__Cactus/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/eudicots__Cactus/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/eudicots__Cactus/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/eudicots__Cactus/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/eudicots__Cactus/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/eudicots__Cactus/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/eudicots__Cactus/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/pyca__cryptography/docs/hazmat/primitives/symmetric-encryption.rst:.. class:: Cipher(algorithm, mode, backend)
/media/ubuntu/DATA/repositories-python/pyca__cryptography/docs/hazmat/primitives/symmetric-encryption.rst:        >>> cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)
/media/ubuntu/DATA/repositories-python/pyca__cryptography/docs/hazmat/primitives/symmetric-encryption.rst:        >>> cipher = Cipher(algorithm, mode=None, backend=default_backend())
/media/ubuntu/DATA/repositories-python/pyca__cryptography/docs/hazmat/primitives/symmetric-encryption.rst:        >>> cipher = Cipher(algorithm, mode=None, backend=default_backend())
/media/ubuntu/DATA/repositories-python/pyca__cryptography/docs/hazmat/primitives/symmetric-encryption.rst:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/docs/hazmat/primitives/symmetric-encryption.rst:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/docs/hazmat/primitives/symmetric-encryption.rst:            >>> cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)
/media/ubuntu/DATA/repositories-python/pyca__cryptography/src/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/src/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/src/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/pyca__cryptography/src/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/pyca__cryptography/src/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/pyca__cryptography/src/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/pyca__cryptography/src/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/backends/test_openssl.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/backends/test_openssl.py:        cipher = Cipher(AES(b"\0" * 16), CBC(b"\0" * 16), backend=backend)
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/test_block.py:            Cipher(algorithm, mode=None, backend=backend)
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/test_block.py:            Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/test_block.py:            Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/test_block.py:            Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/test_block.py:            Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/test_block.py:            Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/test_chacha20.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/test_chacha20.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/utils.py:    cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/utils.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/utils.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/utils.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/utils.py:    cipher = Cipher(cipher_factory(**params), None, backend=backend)
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/utils.py:    cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/utils.py:    cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/utils.py:    cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/hazmat/primitives/utils.py:    cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/wycheproof/test_aes.py:    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend)
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/wycheproof/test_aes.py:        enc = Cipher(algorithms.AES(key), modes.GCM(iv), backend).encryptor()
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/wycheproof/test_aes.py:        dec = Cipher(
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/wycheproof/test_aes.py:            Cipher(algorithms.AES(key), modes.GCM(iv), backend)
/media/ubuntu/DATA/repositories-python/pyca__cryptography/tests/wycheproof/test_aes.py:        dec = Cipher(
/media/ubuntu/DATA/repositories-python/PaddlePaddle__ERNIE/requirements_licma_analysis/rarfile-3.3/rarfile-3.3/rarfile.py:                ciph = Cipher(algorithms.AES(key), modes.CBC(iv), default_backend())
/media/ubuntu/DATA/repositories-python/PaddlePaddle__ERNIE/requirements_licma_analysis/rarfile-3.3/rarfile-3.3/test/test_crypto.py:        ciph = Cipher(algorithms.AES(key), modes.CBC(iv), default_backend())
/media/ubuntu/DATA/repositories-python/janeczku__calibre-web/requirements_licma_analysis/SQLAlchemy-Utils-0.36.8/SQLAlchemy-Utils-0.36.8/sqlalchemy_utils/types/encrypted/encrypted_type.py:        self.cipher = Cipher(
/media/ubuntu/DATA/repositories-python/janeczku__calibre-web/requirements_licma_analysis/SQLAlchemy-Utils-0.36.8/SQLAlchemy-Utils-0.36.8/sqlalchemy_utils/types/encrypted/encrypted_type.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/janeczku__calibre-web/requirements_licma_analysis/SQLAlchemy-Utils-0.36.8/SQLAlchemy-Utils-0.36.8/sqlalchemy_utils/types/encrypted/encrypted_type.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/janeczku__calibre-web/requirements_licma_analysis/rarfile-3.3/rarfile-3.3/rarfile.py:                ciph = Cipher(algorithms.AES(key), modes.CBC(iv), default_backend())
/media/ubuntu/DATA/repositories-python/janeczku__calibre-web/requirements_licma_analysis/rarfile-3.3/rarfile-3.3/test/test_crypto.py:        ciph = Cipher(algorithms.AES(key), modes.CBC(iv), default_backend())
/media/ubuntu/DATA/repositories-python/guardicore__monkey/requirements_licma_analysis/PyInstaller-4.0.dev0+gbe118e95/PyInstaller/PyInstaller/loader/pyimod02_archive.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/guardicore__monkey/requirements_licma_analysis/PyInstaller-4.0.dev0+gbe118e95/PyInstaller/PyInstaller/loader/pyimod02_archive.py:            self.cipher = Cipher()
/media/ubuntu/DATA/repositories-python/guardicore__monkey/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/guardicore__monkey/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/guardicore__monkey/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/ed25519key.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/guardicore__monkey/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/transport.py:            cipher = Cipher(
/media/ubuntu/DATA/repositories-python/guardicore__monkey/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/guardicore__monkey/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/guardicore__monkey/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/guardicore__monkey/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/guardicore__monkey/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/guardicore__monkey/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/guardicore__monkey/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/guardicore__monkey/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/guardicore__monkey/requirements_licma_analysis/PyInstaller-3.6/PyInstaller-3.6/PyInstaller/loader/pyimod02_archive.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/guardicore__monkey/requirements_licma_analysis/PyInstaller-3.6/PyInstaller-3.6/PyInstaller/loader/pyimod02_archive.py:            self.cipher = Cipher()
/media/ubuntu/DATA/repositories-python/python-trio__trio/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/python-trio__trio/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/python-trio__trio/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/python-trio__trio/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/python-trio__trio/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/python-trio__trio/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/python-trio__trio/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/ubuntu__microk8s/requirements_licma_analysis/PyInstaller-3.6/PyInstaller-3.6/PyInstaller/loader/pyimod02_archive.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/ubuntu__microk8s/requirements_licma_analysis/PyInstaller-3.6/PyInstaller-3.6/PyInstaller/loader/pyimod02_archive.py:            self.cipher = Cipher()
/media/ubuntu/DATA/repositories-python/cowrie__cowrie/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cowrie__cowrie/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cowrie__cowrie/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/cowrie__cowrie/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/cowrie__cowrie/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/cowrie__cowrie/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/cowrie__cowrie/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/cowrie__cowrie/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/transport.py:        return Cipher(
/media/ubuntu/DATA/repositories-python/cowrie__cowrie/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/transport.py:            Cipher(
/media/ubuntu/DATA/repositories-python/cowrie__cowrie/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cowrie__cowrie/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cowrie__cowrie/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cowrie__cowrie/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/zalando__connexion/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/zalando__connexion/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/zalando__connexion/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/zalando__connexion/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/zalando__connexion/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/zalando__connexion/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/zalando__connexion/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/zalando__connexion/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/nficano__pytube/pytube/extract.py:    cipher = Cipher(js=js)
/media/ubuntu/DATA/repositories-python/mantl__mantl/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/mantl__mantl/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/mantl__mantl/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/ed25519key.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/mantl__mantl/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/transport.py:            cipher = Cipher(
/media/ubuntu/DATA/repositories-python/mantl__mantl/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/mantl__mantl/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/mantl__mantl/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/mantl__mantl/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/mantl__mantl/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/mantl__mantl/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/mantl__mantl/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/mantl__mantl/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/theskumar__python-dotenv/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/item.py:		decryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/theskumar__python-dotenv/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/util.py:	encryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/theskumar__python-dotenv/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/theskumar__python-dotenv/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/theskumar__python-dotenv/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/theskumar__python-dotenv/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/theskumar__python-dotenv/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/theskumar__python-dotenv/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/theskumar__python-dotenv/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/theskumar__python-dotenv/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/samuelcolvin__pydantic/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/item.py:		decryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/samuelcolvin__pydantic/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/util.py:	encryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/samuelcolvin__pydantic/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/samuelcolvin__pydantic/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/samuelcolvin__pydantic/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/samuelcolvin__pydantic/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/samuelcolvin__pydantic/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/samuelcolvin__pydantic/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/samuelcolvin__pydantic/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/samuelcolvin__pydantic/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/scapy-2.4.3/scapy-2.4.3/scapy/contrib/macsec.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/scapy-2.4.3/scapy-2.4.3/scapy/contrib/macsec.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/scapy-2.4.3/scapy-2.4.3/scapy/layers/dot11.py:            d = Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/scapy-2.4.3/scapy-2.4.3/scapy/layers/dot11.py:            e = Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/scapy-2.4.3/scapy-2.4.3/scapy/layers/ipsec.py:            return Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/scapy-2.4.3/scapy-2.4.3/scapy/layers/ipsec.py:            return Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/scapy-2.4.3/scapy-2.4.3/scapy/layers/tls/crypto/cipher_aead.py:                self._cipher = Cipher(self.pc_cls(key),
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/scapy-2.4.3/scapy-2.4.3/scapy/layers/tls/crypto/cipher_aead.py:                self._cipher = Cipher(self.pc_cls(key),
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/scapy-2.4.3/scapy-2.4.3/scapy/layers/tls/crypto/cipher_aead.py:                self._cipher = Cipher(self.pc_cls(key),
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/scapy-2.4.3/scapy-2.4.3/scapy/layers/tls/crypto/cipher_aead.py:                self._cipher = Cipher(self.pc_cls(key),
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/scapy-2.4.3/scapy-2.4.3/scapy/layers/tls/crypto/cipher_block.py:        self._cipher = Cipher(self.pc_cls(key),
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/scapy-2.4.3/scapy-2.4.3/scapy/layers/tls/crypto/cipher_stream.py:        self._cipher = Cipher(self.pc_cls(key),
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/scapy-2.4.3/scapy-2.4.3/scapy/modules/krack/crypto.py:    cipher = Cipher(algorithm, mode=None, backend=default_backend())
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/transport.py:        return Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/transport.py:            Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/byt3bl33d3r__MITMf/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/r0oth3x49__udemy-dl/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/r0oth3x49__udemy-dl/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/r0oth3x49__udemy-dl/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/r0oth3x49__udemy-dl/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/r0oth3x49__udemy-dl/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/r0oth3x49__udemy-dl/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/r0oth3x49__udemy-dl/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/r0oth3x49__udemy-dl/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/scrapinghub__splash/requirements_licma_analysis/Twisted-19.7.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/transport.py:        return Cipher(
/media/ubuntu/DATA/repositories-python/scrapinghub__splash/requirements_licma_analysis/Twisted-19.7.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/transport.py:            Cipher(
/media/ubuntu/DATA/repositories-python/scrapinghub__splash/requirements_licma_analysis/Twisted-19.7.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/scrapinghub__splash/requirements_licma_analysis/Twisted-19.7.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/scrapinghub__splash/requirements_licma_analysis/Twisted-19.7.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:                encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/golemfactory__golem/requirements_licma_analysis/cryptography-2.7-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/golemfactory__golem/requirements_licma_analysis/cryptography-2.7-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/golemfactory__golem/requirements_licma_analysis/cryptography-2.7-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/golemfactory__golem/requirements_licma_analysis/cryptography-2.7-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/golemfactory__golem/requirements_licma_analysis/cryptography-2.7-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/golemfactory__golem/requirements_licma_analysis/cryptography-2.7-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/golemfactory__golem/requirements_licma_analysis/cryptography-2.7-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/freedomofpress__securedrop/securedrop/secure_tempfile.py:        self.cipher = Cipher(AES(self.key), CTR(self.iv), default_backend())
/media/ubuntu/DATA/repositories-python/freedomofpress__securedrop/requirements_licma_analysis/cryptography-2.7-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/freedomofpress__securedrop/requirements_licma_analysis/cryptography-2.7-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/freedomofpress__securedrop/requirements_licma_analysis/cryptography-2.7-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/freedomofpress__securedrop/requirements_licma_analysis/cryptography-2.7-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/freedomofpress__securedrop/requirements_licma_analysis/cryptography-2.7-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/freedomofpress__securedrop/requirements_licma_analysis/cryptography-2.7-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/freedomofpress__securedrop/requirements_licma_analysis/cryptography-2.7-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/freedomofpress__securedrop/requirements_licma_analysis/paramiko-2.6.0-py2.py3-none-any/paramiko/pkey.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/freedomofpress__securedrop/requirements_licma_analysis/paramiko-2.6.0-py2.py3-none-any/paramiko/ed25519key.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/freedomofpress__securedrop/requirements_licma_analysis/paramiko-2.6.0-py2.py3-none-any/paramiko/transport.py:            cipher = Cipher(
/media/ubuntu/DATA/repositories-python/freedomofpress__securedrop/requirements_licma_analysis/cryptography-2.6.1-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/freedomofpress__securedrop/requirements_licma_analysis/cryptography-2.6.1-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/freedomofpress__securedrop/requirements_licma_analysis/cryptography-2.6.1-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/freedomofpress__securedrop/requirements_licma_analysis/cryptography-2.6.1-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/freedomofpress__securedrop/requirements_licma_analysis/cryptography-2.6.1-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/freedomofpress__securedrop/requirements_licma_analysis/cryptography-2.6.1-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/freedomofpress__securedrop/requirements_licma_analysis/cryptography-2.6.1-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/cloud-custodian__cloud-custodian/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cloud-custodian__cloud-custodian/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cloud-custodian__cloud-custodian/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/cloud-custodian__cloud-custodian/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/cloud-custodian__cloud-custodian/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/cloud-custodian__cloud-custodian/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/cloud-custodian__cloud-custodian/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/cloud-custodian__cloud-custodian/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/item.py:		decryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/cloud-custodian__cloud-custodian/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/util.py:	encryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/cloud-custodian__cloud-custodian/requirements_licma_analysis/azure_cosmosdb_table-1.0.6-py2.py3-none-any/azure/cosmosdb/table/common/_encryption.py:    return Cipher(algorithm, mode, backend)
/media/ubuntu/DATA/repositories-python/cloud-custodian__cloud-custodian/requirements_licma_analysis/azure_keyvault-1.1.0-py2.py3-none-any/azure/keyvault/_internal.py:    cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend())
/media/ubuntu/DATA/repositories-python/cloud-custodian__cloud-custodian/requirements_licma_analysis/azure_keyvault-1.1.0-py2.py3-none-any/azure/keyvault/_internal.py:    cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend())
/media/ubuntu/DATA/repositories-python/cloud-custodian__cloud-custodian/requirements_licma_analysis/azure_storage_common-2.1.0-py2.py3-none-any/azure/storage/common/_encryption.py:    return Cipher(algorithm, mode, backend)
/media/ubuntu/DATA/repositories-python/cloud-custodian__cloud-custodian/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cloud-custodian__cloud-custodian/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cloud-custodian__cloud-custodian/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/ed25519key.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/cloud-custodian__cloud-custodian/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/transport.py:            cipher = Cipher(
/media/ubuntu/DATA/repositories-python/dyve__django-bootstrap3/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/item.py:		decryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).decryptor()
/media/ubuntu/DATA/repositories-python/dyve__django-bootstrap3/requirements_licma_analysis/SecretStorage-3.1.2-py3-none-any/secretstorage/util.py:	encryptor = Cipher(aes, modes.CBC(aes_iv), default_backend()).encryptor()
/media/ubuntu/DATA/repositories-python/dyve__django-bootstrap3/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/dyve__django-bootstrap3/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/dyve__django-bootstrap3/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/dyve__django-bootstrap3/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/dyve__django-bootstrap3/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/dyve__django-bootstrap3/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/dyve__django-bootstrap3/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/dyve__django-bootstrap3/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/datawire__ambassador/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/datawire__ambassador/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/datawire__ambassador/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/datawire__ambassador/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/datawire__ambassador/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/datawire__ambassador/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/datawire__ambassador/requirements_licma_analysis/cryptography-2.9.2-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/ab77__netflix-proxy/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/ab77__netflix-proxy/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/pkey.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/ab77__netflix-proxy/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/ed25519key.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/ab77__netflix-proxy/requirements_licma_analysis/paramiko-2.7.1-py2.py3-none-any/paramiko/transport.py:            cipher = Cipher(
/media/ubuntu/DATA/repositories-python/ab77__netflix-proxy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/ab77__netflix-proxy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/ab77__netflix-proxy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/ab77__netflix-proxy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/ab77__netflix-proxy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/ab77__netflix-proxy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/ab77__netflix-proxy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/ab77__netflix-proxy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/ysrc__xunfeng/vulscan/vuldb/shiro_550.py:	cipher = Cipher(algorithms.AES(base64.b64decode("kPH+bIxk5D2deZiIxcaaaA==")),modes.CBC("1111111111111111"),backend=default_backend())
/media/ubuntu/DATA/repositories-python/ysrc__xunfeng/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/ysrc__xunfeng/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/ysrc__xunfeng/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/ysrc__xunfeng/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/ysrc__xunfeng/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/ysrc__xunfeng/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/ysrc__xunfeng/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/ysrc__xunfeng/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/CTFd__CTFd/requirements_licma_analysis/SQLAlchemy-Utils-0.36.0/SQLAlchemy-Utils-0.36.0/sqlalchemy_utils/types/encrypted/encrypted_type.py:        self.cipher = Cipher(
/media/ubuntu/DATA/repositories-python/CTFd__CTFd/requirements_licma_analysis/SQLAlchemy-Utils-0.36.0/SQLAlchemy-Utils-0.36.0/sqlalchemy_utils/types/encrypted/encrypted_type.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/CTFd__CTFd/requirements_licma_analysis/SQLAlchemy-Utils-0.36.0/SQLAlchemy-Utils-0.36.0/sqlalchemy_utils/types/encrypted/encrypted_type.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/OpenDroneMap__ODM/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/OpenDroneMap__ODM/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/OpenDroneMap__ODM/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/OpenDroneMap__ODM/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/OpenDroneMap__ODM/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/OpenDroneMap__ODM/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/OpenDroneMap__ODM/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/pritunl__pritunl/pritunl/handlers/link.py:    cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pritunl__pritunl/tools/builder.py:    cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pritunl__pritunl/tools/builder.py:    cipher = Cipher(
/media/ubuntu/DATA/repositories-python/pritunl__pritunl/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/transport.py:        return Cipher(
/media/ubuntu/DATA/repositories-python/pritunl__pritunl/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/transport.py:            Cipher(
/media/ubuntu/DATA/repositories-python/pritunl__pritunl/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/pritunl__pritunl/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/pritunl__pritunl/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/pritunl__pritunl/requirements_licma_analysis/Twisted-20.3.0-cp36-cp36m-manylinux1_x86_64/twisted/conch/ssh/keys.py:            encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/pritunl__pritunl/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/pritunl__pritunl/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/pritunl__pritunl/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/pritunl__pritunl/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/pritunl__pritunl/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/pritunl__pritunl/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/pritunl__pritunl/requirements_licma_analysis/cryptography-2.8-cp34-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/src/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/src/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/src/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/src/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/src/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/backends/test_openssl.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/backends/test_openssl.py:        cipher = Cipher(AES(b"\0" * 16), CBC(b"\0" * 16), backend=backend)
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/test_block.py:            Cipher(algorithm, mode=None, backend=backend)
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/test_block.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/test_block.py:            Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/test_block.py:            Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/test_block.py:            Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/test_block.py:            Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/test_block.py:            Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/utils.py:    cipher = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/utils.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/utils.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/utils.py:        cipher = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/utils.py:    cipher = Cipher(cipher_factory(**params), None, backend=backend)
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/utils.py:    cipher = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/utils.py:    cipher = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/utils.py:    cipher = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/cryptography-1.9/cryptography-1.9/tests/hazmat/primitives/utils.py:    cipher = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/paramiko-2.1.2-py2.py3-none-any/paramiko/pkey.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/paramiko-2.1.2-py2.py3-none-any/paramiko/transport.py:            cipher = Cipher(
/media/ubuntu/DATA/repositories-python/Chaosthebot__Chaos/requirements_licma_analysis/paramiko-2.1.2-py2.py3-none-any/paramiko/transport.py:            cipher = Cipher(
/media/ubuntu/DATA/repositories-python/wechatpy__wechatpy/requirements_licma_analysis/wechatpy-1.8.13-py2.py3-none-any/wechatpy/crypto/cryptography.py:            Cipher(
/media/ubuntu/DATA/repositories-python/wechatpy__wechatpy/requirements_licma_analysis/wechatpy-1.8.13-py2.py3-none-any/wechatpy/crypto/cryptography.py:            Cipher(
/media/ubuntu/DATA/repositories-python/wechatpy__wechatpy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/wechatpy__wechatpy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/wechatpy__wechatpy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/wechatpy__wechatpy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/wechatpy__wechatpy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/wechatpy__wechatpy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/wechatpy__wechatpy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/wechatpy__wechatpy/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/guohongze__adminset/requirements_licma_analysis/ansible-2.7.8/ansible-2.7.8/lib/ansible/parsing/vault/__init__.py:        # creates a Cipher() with b_key1, a Mode.CTR() with b_iv, and a HMAC() with sign key b_key2
/media/ubuntu/DATA/repositories-python/guohongze__adminset/requirements_licma_analysis/paramiko-2.4.2-py2.py3-none-any/paramiko/ed25519key.py:            decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/guohongze__adminset/requirements_licma_analysis/paramiko-2.4.2-py2.py3-none-any/paramiko/pkey.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/guohongze__adminset/requirements_licma_analysis/paramiko-2.4.2-py2.py3-none-any/paramiko/transport.py:            cipher = Cipher(
/media/ubuntu/DATA/repositories-python/guohongze__adminset/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/guohongze__adminset/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/guohongze__adminset/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/guohongze__adminset/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/guohongze__adminset/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/guohongze__adminset/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/guohongze__adminset/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/guohongze__adminset/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
/media/ubuntu/DATA/repositories-python/novnc__websockify/requirements_licma_analysis/jwcrypto-0.7-py2.py3-none-any/jwcrypto/jwa.py:        cipher = Cipher(algorithms.AES(rk), modes.GCM(iv),
/media/ubuntu/DATA/repositories-python/novnc__websockify/requirements_licma_analysis/jwcrypto-0.7-py2.py3-none-any/jwcrypto/jwa.py:        cipher = Cipher(algorithms.AES(rk), modes.GCM(iv, tag),
/media/ubuntu/DATA/repositories-python/novnc__websockify/requirements_licma_analysis/jwcrypto-0.7-py2.py3-none-any/jwcrypto/jwa.py:        cipher = Cipher(algorithms.AES(ekey), modes.CBC(iv),
/media/ubuntu/DATA/repositories-python/novnc__websockify/requirements_licma_analysis/jwcrypto-0.7-py2.py3-none-any/jwcrypto/jwa.py:        cipher = Cipher(algorithms.AES(dkey), modes.CBC(iv),
/media/ubuntu/DATA/repositories-python/novnc__websockify/requirements_licma_analysis/jwcrypto-0.7-py2.py3-none-any/jwcrypto/jwa.py:        cipher = Cipher(algorithms.AES(k), modes.GCM(iv),
/media/ubuntu/DATA/repositories-python/novnc__websockify/requirements_licma_analysis/jwcrypto-0.7-py2.py3-none-any/jwcrypto/jwa.py:        cipher = Cipher(algorithms.AES(k), modes.GCM(iv, t),
/media/ubuntu/DATA/repositories-python/novnc__websockify/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        encryptor = Cipher(
/media/ubuntu/DATA/repositories-python/novnc__websockify/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/fernet.py:        decryptor = Cipher(
/media/ubuntu/DATA/repositories-python/novnc__websockify/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/novnc__websockify/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:    decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/novnc__websockify/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        encryptor = Cipher(AES(wrapping_key), ECB(), backend).encryptor()
/media/ubuntu/DATA/repositories-python/novnc__websockify/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/keywrap.py:        decryptor = Cipher(AES(wrapping_key), ECB(), backend).decryptor()
/media/ubuntu/DATA/repositories-python/novnc__websockify/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/serialization/ssh.py:    return Cipher(algo(seed[:key_len]), mode(seed[key_len:]), backend)
/media/ubuntu/DATA/repositories-python/novnc__websockify/requirements_licma_analysis/cryptography-3.0-cp35-abi3-manylinux1_x86_64/cryptography/hazmat/primitives/ciphers/base.py:class Cipher(object):
