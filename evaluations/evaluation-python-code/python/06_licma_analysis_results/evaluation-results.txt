Evaluation of the log file
==================================================
Number of processed files: 946
Number of successfully processed files: 911
Number of processed files without any error: 861
Errors: 85
==> Parsing not possible: 35
==> Maximum recursion depth exceeded: 50
====> rule: PyQuery: Rule 1 M2Crypto: 1
====> rule: PyQuery: Rule 3 cryptography: 1
====> rule: PyQuery: Rule 5 M2Crypto: 40
====> rule: PyQuery: Rule 4 M2Crypto: 2
====> rule: PyQuery: Rule 2 PyCrypto: 1
====> rule: PyQuery: Rule 3 PyCrypto: 5


Evaluation of the result file
==================================================
General
==================================================
Number of all results: 1501
Number of results no duplicates: 1501
No duplicates ==> TRUE
==================================================
Repositories
==================================================
Number of repositories with misuses: 81
==> Number of found misuses in these repositories: 1501
====> PyQuery: Rule 4 | PyCrypto: 53
====> PyQuery: Rule 5 | PyCrypto: 32
====> PyQuery: Rule 1 | PyCrypto: 13
====> PyQuery: Rule 2 | PyCrypto: 4
====> PyQuery: Rule 1 | M2Crypto: 446
====> PyQuery: Rule 2 | M2Crypto: 422
====> PyQuery: Rule 3 | cryptography: 456
====> PyQuery: Rule 3 | M2Crypto: 16
====> PyQuery: Rule 1 | cryptography: 12
====> PyQuery: Rule 2 | cryptography: 16
====> PyQuery: Rule 4 | cryptography: 3
====> PyQuery: Rule 4 | M2Crypto: 1
====> PyQuery: Rule 5 | M2Crypto: 1
====> PyQuery: Rule 3 | PyCrypto: 24
====> PyQuery: Rule 3 | PyNaCl: 2
==> Number of found warning misuses in these repositories: 1416
====> PyQuery: Rule 4 | PyCrypto: 38
====> PyQuery: Rule 5 | PyCrypto: 0
====> PyQuery: Rule 1 | PyCrypto: 0
====> PyQuery: Rule 2 | PyCrypto: 0
====> PyQuery: Rule 1 | M2Crypto: 446
====> PyQuery: Rule 2 | M2Crypto: 422
====> PyQuery: Rule 3 | cryptography: 446
====> PyQuery: Rule 3 | M2Crypto: 12
====> PyQuery: Rule 1 | cryptography: 12
====> PyQuery: Rule 2 | cryptography: 12
====> PyQuery: Rule 4 | cryptography: 0
====> PyQuery: Rule 4 | M2Crypto: 1
====> PyQuery: Rule 5 | M2Crypto: 1
====> PyQuery: Rule 3 | PyCrypto: 24
====> PyQuery: Rule 3 | PyNaCl: 2
==> Number of found critical misuses in these repositories: 85
====> PyQuery: Rule 5 | PyCrypto: 1
====> PyQuery: Rule 4 | PyCrypto: 38
====> PyQuery: Rule 1 | PyCrypto: 1
====> PyQuery: Rule 2 | PyCrypto: 1
====> PyQuery: Rule 3 | M2Crypto: 11
====> PyQuery: Rule 2 | cryptography: 11
====> PyQuery: Rule 3 | cryptography: 358
====> PyQuery: Rule 4 | cryptography: 1
==> Number of misuses in repos without libs: 105
====> PyQuery: Rule 1 | PyCrypto: 4
====> PyQuery: Rule 2 | PyCrypto: 1
====> PyQuery: Rule 4 | PyCrypto: 6
====> PyQuery: Rule 5 | PyCrypto: 2
====> PyQuery: Rule 1 | M2Crypto: 23
====> PyQuery: Rule 3 | M2Crypto: 7
====> PyQuery: Rule 1 | cryptography: 5
====> PyQuery: Rule 2 | cryptography: 7
====> PyQuery: Rule 3 | cryptography: 28
====> PyQuery: Rule 4 | cryptography: 1
====> PyQuery: Rule 2 | M2Crypto: 12
====> PyQuery: Rule 4 | M2Crypto: 1
====> PyQuery: Rule 3 | PyCrypto: 6
====> PyQuery: Rule 3 | PyNaCl: 2
==> Number of warning misuses in repos without libs: 87
====> PyQuery: Rule 1 | PyCrypto: 0
====> PyQuery: Rule 2 | PyCrypto: 0
====> PyQuery: Rule 4 | PyCrypto: 5
====> PyQuery: Rule 5 | PyCrypto: 0
====> PyQuery: Rule 1 | M2Crypto: 23
====> PyQuery: Rule 3 | M2Crypto: 5
====> PyQuery: Rule 1 | cryptography: 5
====> PyQuery: Rule 2 | cryptography: 5
====> PyQuery: Rule 3 | cryptography: 23
====> PyQuery: Rule 4 | cryptography: 0
====> PyQuery: Rule 2 | M2Crypto: 12
====> PyQuery: Rule 4 | M2Crypto: 1
====> PyQuery: Rule 3 | PyCrypto: 6
====> PyQuery: Rule 3 | PyNaCl: 2
==> Number of critical misuses in repos without libs: 18
====> PyQuery: Rule 1 | PyCrypto: 1
====> PyQuery: Rule 2 | PyCrypto: 1
====> PyQuery: Rule 4 | PyCrypto: 6
====> PyQuery: Rule 5 | PyCrypto: 1
====> PyQuery: Rule 3 | M2Crypto: 4
====> PyQuery: Rule 2 | cryptography: 4
====> PyQuery: Rule 3 | cryptography: 8
====> PyQuery: Rule 4 | cryptography: 1
==================================================
LIBRARIES
==================================================
Number of libs in these repositories were a misuse was found: 97
==> Number of misuses in these libraries: 1396
====> PyQuery: Rule 4 | PyCrypto: 47
====> PyQuery: Rule 5 | PyCrypto: 30
====> PyQuery: Rule 1 | PyCrypto: 9
====> PyQuery: Rule 2 | PyCrypto: 3
====> PyQuery: Rule 1 | M2Crypto: 423
====> PyQuery: Rule 2 | M2Crypto: 410
====> PyQuery: Rule 3 | cryptography: 428
====> PyQuery: Rule 3 | M2Crypto: 9
====> PyQuery: Rule 1 | cryptography: 7
====> PyQuery: Rule 2 | cryptography: 9
====> PyQuery: Rule 4 | cryptography: 2
====> PyQuery: Rule 5 | M2Crypto: 1
====> PyQuery: Rule 3 | PyCrypto: 18
==> Number of warning misuses in these libraries: 1329
====> PyQuery: Rule 4 | PyCrypto: 33
====> PyQuery: Rule 1 | M2Crypto: 423
====> PyQuery: Rule 2 | M2Crypto: 410
====> PyQuery: Rule 3 | cryptography: 423
====> PyQuery: Rule 3 | M2Crypto: 7
====> PyQuery: Rule 1 | cryptography: 7
====> PyQuery: Rule 2 | cryptography: 7
====> PyQuery: Rule 5 | M2Crypto: 1
====> PyQuery: Rule 3 | PyCrypto: 18
==> Number of critical misuses in these libraries: 67
====> PyQuery: Rule 5 | PyCrypto: 30
====> PyQuery: Rule 4 | PyCrypto: 14
====> PyQuery: Rule 1 | PyCrypto: 9
====> PyQuery: Rule 2 | PyCrypto: 3
====> PyQuery: Rule 3 | M2Crypto: 2
====> PyQuery: Rule 2 | cryptography: 2
====> PyQuery: Rule 3 | cryptography: 5
====> PyQuery: Rule 4 | cryptography: 2
==> Unique number of these libs: 28
====> Number of misuses in libraries no duplicates: 290
======> PyQuery: Rule 4 | PyCrypto: 21
======> PyQuery: Rule 5 | PyCrypto: 12
======> PyQuery: Rule 1 | PyCrypto: 3
======> PyQuery: Rule 2 | PyCrypto: 1
======> PyQuery: Rule 1 | M2Crypto: 75
======> PyQuery: Rule 2 | M2Crypto: 62
======> PyQuery: Rule 3 | cryptography: 80
======> PyQuery: Rule 3 | M2Crypto: 9
======> PyQuery: Rule 1 | cryptography: 7
======> PyQuery: Rule 2 | cryptography: 9
======> PyQuery: Rule 4 | cryptography: 2
======> PyQuery: Rule 5 | M2Crypto: 1
======> PyQuery: Rule 3 | PyCrypto: 8
====> Number of warning misuses in libraries no duplicates: 258
======> PyQuery: Rule 4 | PyCrypto: 16
======> PyQuery: Rule 1 | M2Crypto: 75
======> PyQuery: Rule 2 | M2Crypto: 62
======> PyQuery: Rule 3 | cryptography: 75
======> PyQuery: Rule 3 | M2Crypto: 7
======> PyQuery: Rule 1 | cryptography: 7
======> PyQuery: Rule 2 | cryptography: 7
======> PyQuery: Rule 5 | M2Crypto: 1
======> PyQuery: Rule 3 | PyCrypto: 8
====> Number of critical misuses in libraries no duplicates: 32
======> PyQuery: Rule 5 | PyCrypto: 12
======> PyQuery: Rule 4 | PyCrypto: 5
======> PyQuery: Rule 1 | PyCrypto: 3
======> PyQuery: Rule 2 | PyCrypto: 1
======> PyQuery: Rule 3 | M2Crypto: 2
======> PyQuery: Rule 2 | cryptography: 2
======> PyQuery: Rule 3 | cryptography: 5
======> PyQuery: Rule 4 | cryptography: 2
==================================================
Tops
==================================================
==================================================
Top 10 Repositories:
==================================================
==> cloudera__hue: 58
==> byt3bl33d3r__MITMf: 52
==> byt3bl33d3r__CrackMapExec: 40
==> guardicore__monkey: 39
==> trustedsec__social-engineer-toolkit: 36
==> certbot__certbot: 36
==> mirumee__saleor: 36
==> freedomofpress__securedrop: 36
==> SecureAuthCorp__impacket: 35
==> secdev__scapy: 34
==================================================
Top 10 Repositories(WARNING):
==================================================
==> cloudera__hue: 55
==> byt3bl33d3r__MITMf: 43
==> certbot__certbot: 36
==> mirumee__saleor: 36
==> freedomofpress__securedrop: 36
==> byt3bl33d3r__CrackMapExec: 33
==> trustedsec__social-engineer-toolkit: 29
==> guardicore__monkey: 29
==> SecureAuthCorp__impacket: 28
==> QUANTAXIS__QUANTAXIS: 28
==================================================
Top 10 Repositories(CRITICAL):
==================================================
==> guardicore__monkey: 10
==> secdev__scapy: 9
==> byt3bl33d3r__MITMf: 9
==> trustedsec__social-engineer-toolkit: 7
==> SecureAuthCorp__impacket: 7
==> byt3bl33d3r__CrackMapExec: 7
==> netbox-community__netbox: 6
==> instagrambot__instabot: 6
==> nicolargo__glances: 3
==> Kr1s77__awesome-python-login-model: 3
==================================================
Top 10 Repositories without libs:
==================================================
==> secdev__scapy: 34
==> cloudera__hue: 22
==> pyca__cryptography: 18
==> SecureAuthCorp__impacket: 13
==> lbryio__lbry-sdk: 10
==> offu__WeRoBot: 2
==> jrnl-org__jrnl: 1
==> AlessandroZ__LaZagne: 1
==> trustedsec__social-engineer-toolkit: 1
==> streamlink__streamlink: 1
==================================================
Top 10 Repositories without libs(WARNING):
==================================================
==> secdev__scapy: 25
==> cloudera__hue: 19
==> pyca__cryptography: 18
==> lbryio__lbry-sdk: 10
==> SecureAuthCorp__impacket: 9
==> offu__WeRoBot: 2
==> AlessandroZ__LaZagne: 1
==> trustedsec__social-engineer-toolkit: 1
==> home-assistant__core: 1
==> warner__magic-wormhole: 1
==================================================
Top 10 Repositories without libs(CRITICAL):
==================================================
==> secdev__scapy: 9
==> SecureAuthCorp__impacket: 4
==> cloudera__hue: 3
==> jrnl-org__jrnl: 1
==> streamlink__streamlink: 1
==================================================
Top 10 Libraries with multiple usage in repos:
==================================================
==> byt3bl33d3r__MITMf: 52
==> byt3bl33d3r__CrackMapExec: 40
==> guardicore__monkey: 39
==> certbot__certbot: 36
==> mirumee__saleor: 36
==> cloudera__hue: 36
==> freedomofpress__securedrop: 36
==> trustedsec__social-engineer-toolkit: 35
==> QUANTAXIS__QUANTAXIS: 28
==> cloud-custodian__cloud-custodian: 28
==================================================
Top 10 Libraries with multiple usage in repos(WARNING):
==================================================
==> byt3bl33d3r__MITMf: 43
==> certbot__certbot: 36
==> mirumee__saleor: 36
==> cloudera__hue: 36
==> freedomofpress__securedrop: 36
==> byt3bl33d3r__CrackMapExec: 33
==> guardicore__monkey: 29
==> trustedsec__social-engineer-toolkit: 28
==> QUANTAXIS__QUANTAXIS: 28
==> cloud-custodian__cloud-custodian: 28
==================================================
Top 10 Libraries with multiple usage in repos(CRITICAL):
==================================================
==> guardicore__monkey: 10
==> byt3bl33d3r__MITMf: 9
==> trustedsec__social-engineer-toolkit: 7
==> byt3bl33d3r__CrackMapExec: 7
==> netbox-community__netbox: 6
==> instagrambot__instabot: 6
==> nicolargo__glances: 3
==> Kr1s77__awesome-python-login-model: 3
==> n1nj4sec__pupy: 3
==> SecureAuthCorp__impacket: 3
==================================================
Top 10 Libraries no duplicate usage in repo:
==================================================
==> mirumee__saleor: 36
==> byt3bl33d3r__MITMf: 34
==> byt3bl33d3r__CrackMapExec: 27
==> golemfactory__golem: 20
==> nvbn__thefuck: 18
==> apache__incubator-superset: 18
==> MobSF__Mobile-Security-Framework-MobSF: 18
==> taigaio__taiga-back: 18
==> docker__docker-py: 18
==> freedomofpress__securedrop: 18
==================================================
Top 10 Libraries no duplicate usage in repo(WARNING):
==================================================
==> mirumee__saleor: 36
==> byt3bl33d3r__MITMf: 25
==> byt3bl33d3r__CrackMapExec: 24
==> golemfactory__golem: 20
==> nvbn__thefuck: 18
==> apache__incubator-superset: 18
==> MobSF__Mobile-Security-Framework-MobSF: 18
==> taigaio__taiga-back: 18
==> docker__docker-py: 18
==> freedomofpress__securedrop: 18
==================================================
Top 10 Libraries no duplicate usage in repo(CRITICAL):
==================================================
==> byt3bl33d3r__MITMf: 9
==> trustedsec__social-engineer-toolkit: 4
==> nicolargo__glances: 3
==> Kr1s77__awesome-python-login-model: 3
==> netbox-community__netbox: 3
==> n1nj4sec__pupy: 3
==> byt3bl33d3r__CrackMapExec: 3
==> localstack__localstack: 2
==> novnc__websockify: 2
==================================================
Top 10 rules(ALL FOUND MISUSES):
==================================================
==> PyQuery: Rule 3 | cryptography: 456
==> PyQuery: Rule 1 | M2Crypto: 446
==> PyQuery: Rule 2 | M2Crypto: 422
==> PyQuery: Rule 4 | PyCrypto: 53
==> PyQuery: Rule 5 | PyCrypto: 32
==> PyQuery: Rule 3 | PyCrypto: 24
==> PyQuery: Rule 3 | M2Crypto: 16
==> PyQuery: Rule 2 | cryptography: 16
==> PyQuery: Rule 1 | PyCrypto: 13
==> PyQuery: Rule 1 | cryptography: 12
==================================================
CRITICAL LINES OF CODE
==================================================
Rule: PyQuery: Rule 4 | PyCrypto Value: ""
    dk = PBKDF2(password,
                b"".join(data_out),
                key_len * num_keys, 1,

==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1

    stage_1 = PBKDF2(password, salt, p * 128 * r, 1, prf=prf_hmac_sha256)


==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1
                b"".join(data_out),
                key_len * num_keys, 1,
                prf=prf_hmac_sha256)

==================================================
Rule: PyQuery: Rule 4 | PyCrypto Value: ""
    dk = PBKDF2(password,
                b"".join(data_out),
                key_len * num_keys, 1,

==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1

    stage_1 = PBKDF2(password, salt, p * 128 * r, 1, prf=prf_hmac_sha256)


==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1
                b"".join(data_out),
                key_len * num_keys, 1,
                prf=prf_hmac_sha256)

==================================================
Rule: PyQuery: Rule 1 | PyCrypto Value: MODE_ECB

    AES_128= AES.new(K, AES.MODE_ECB)
    M      = bytearray(M[:length])

==================================================
Rule: PyQuery: Rule 1 | PyCrypto Value: MODE_ECB

    AES_128 = AES.new(K, AES.MODE_ECB)


==================================================
Rule: PyQuery: Rule 1 | PyCrypto Value: MODE_ECB
        assert len(ciphertext) >= 16
        aes = AES.new(key.contents, AES.MODE_ECB)
        if len(ciphertext) == 16:

==================================================
Rule: PyQuery: Rule 2 | PyCrypto Value: ""
        assert len(plaintext) >= 16
        aes = AES.new(key.contents, AES.MODE_CBC, b'\0' * 16)
        ctext = aes.encrypt(_zeropad(bytes(plaintext), 16))

==================================================
Rule: PyQuery: Rule 4 | PyCrypto Value: ""
    dk = PBKDF2(password,
                b"".join(data_out),
                key_len * num_keys, 1,

==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1

    stage_1 = PBKDF2(password, salt, p * 128 * r, 1, prf=prf_hmac_sha256)


==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1
                b"".join(data_out),
                key_len * num_keys, 1,
                prf=prf_hmac_sha256)

==================================================
Rule: PyQuery: Rule 1 | PyCrypto Value: MODE_ECB

    AES_128= AES.new(K, AES.MODE_ECB)
    M      = bytearray(M[:length])

==================================================
Rule: PyQuery: Rule 1 | PyCrypto Value: MODE_ECB

    AES_128 = AES.new(K, AES.MODE_ECB)


==================================================
Rule: PyQuery: Rule 1 | PyCrypto Value: MODE_ECB
        assert len(ciphertext) >= 16
        aes = AES.new(key.contents, AES.MODE_ECB)
        if len(ciphertext) == 16:

==================================================
Rule: PyQuery: Rule 2 | PyCrypto Value: ""
        assert len(plaintext) >= 16
        aes = AES.new(key.contents, AES.MODE_CBC, b'\0' * 16)
        ctext = aes.encrypt(_zeropad(bytes(plaintext), 16))

==================================================
Rule: PyQuery: Rule 4 | PyCrypto Value: ""
    dk = PBKDF2(password,
                b"".join(data_out),
                key_len * num_keys, 1,

==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1

    stage_1 = PBKDF2(password, salt, p * 128 * r, 1, prf=prf_hmac_sha256)


==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1
                b"".join(data_out),
                key_len * num_keys, 1,
                prf=prf_hmac_sha256)

==================================================
Rule: PyQuery: Rule 2 | cryptography Value: ""
Assignment:             fixed_iv = b"\0" * self.fixed_iv_len

                self._cipher = Cipher(self.pc_cls(key),
                                      self.pc_cls_mode(fixed_iv),
                                      backend=default_backend(),

==================================================
Rule: PyQuery: Rule 3 | M2Crypto Value: ""
Assignment:             fixed_iv = b"\0" * self.fixed_iv_len

                self._cipher = Cipher(self.pc_cls(key),
                                      self.pc_cls_mode(fixed_iv),
                                      backend=default_backend(),

==================================================
Rule: PyQuery: Rule 3 | cryptography Value: ""
Assignment:             key = b"\0" * self.key_len

            if isinstance(self.pc_cls, AESCCM):
                self._cipher = Cipher(self.pc_cls(key),
                                      self.pc_cls_mode(self._get_nonce()),

==================================================
Rule: PyQuery: Rule 3 | cryptography Value: ""
Assignment:             fixed_iv = b"\0" * self.fixed_iv_len

            if isinstance(self.pc_cls, AESCCM):
                self._cipher = Cipher(self.pc_cls(key),
                                      self.pc_cls_mode(self._get_nonce()),

==================================================
Rule: PyQuery: Rule 2 | cryptography Value: ""
Assignment:             iv = b"\0" * self.block_size

        self._cipher = Cipher(self.pc_cls(key),
                              self.pc_cls_mode(iv),
                              backend=backend)

==================================================
Rule: PyQuery: Rule 3 | M2Crypto Value: ""
Assignment:             iv = b"\0" * self.block_size

        self._cipher = Cipher(self.pc_cls(key),
                              self.pc_cls_mode(iv),
                              backend=backend)

==================================================
Rule: PyQuery: Rule 3 | cryptography Value: ""
Assignment:             key = b"\0" * key_len


        self._cipher = Cipher(self.pc_cls(key),
                              self.pc_cls_mode(iv),

==================================================
Rule: PyQuery: Rule 3 | cryptography Value: ""
Assignment:             iv = b"\0" * self.block_size


        self._cipher = Cipher(self.pc_cls(key),
                              self.pc_cls_mode(iv),

==================================================
Rule: PyQuery: Rule 3 | cryptography Value: ""
Assignment:             key = b"\0" * tmp_len


        self._cipher = Cipher(self.pc_cls(key),
                              mode=None,

==================================================
Rule: PyQuery: Rule 4 | PyCrypto Value: ""
    dk = PBKDF2(password,
                b"".join(data_out),
                key_len * num_keys, 1,

==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1

    stage_1 = PBKDF2(password, salt, p * 128 * r, 1, prf=prf_hmac_sha256)


==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1
                b"".join(data_out),
                key_len * num_keys, 1,
                prf=prf_hmac_sha256)

==================================================
Rule: PyQuery: Rule 1 | PyCrypto Value: MODE_ECB

    AES_128= AES.new(K, AES.MODE_ECB)
    M      = bytearray(M[:length])

==================================================
Rule: PyQuery: Rule 1 | PyCrypto Value: MODE_ECB

    AES_128 = AES.new(K, AES.MODE_ECB)


==================================================
Rule: PyQuery: Rule 1 | PyCrypto Value: MODE_ECB
        assert len(ciphertext) >= 16
        aes = AES.new(key.contents, AES.MODE_ECB)
        if len(ciphertext) == 16:

==================================================
Rule: PyQuery: Rule 2 | PyCrypto Value: ""
        assert len(plaintext) >= 16
        aes = AES.new(key.contents, AES.MODE_CBC, b'\0' * 16)
        ctext = aes.encrypt(_zeropad(bytes(plaintext), 16))

==================================================
Rule: PyQuery: Rule 4 | PyCrypto Value: ""
    dk = PBKDF2(password,
                b"".join(data_out),
                key_len * num_keys, 1,

==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1

    stage_1 = PBKDF2(password, salt, p * 128 * r, 1, prf=prf_hmac_sha256)


==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1
                b"".join(data_out),
                key_len * num_keys, 1,
                prf=prf_hmac_sha256)

==================================================
Rule: PyQuery: Rule 4 | PyCrypto Value: ""
    dk = PBKDF2(password,
                b"".join(data_out),
                key_len * num_keys, 1,

==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1

    stage_1 = PBKDF2(password, salt, p * 128 * r, 1, prf=prf_hmac_sha256)


==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1
                b"".join(data_out),
                key_len * num_keys, 1,
                prf=prf_hmac_sha256)

==================================================
Rule: PyQuery: Rule 4 | PyCrypto Value: ""
    dk = PBKDF2(password,
                b"".join(data_out),
                key_len * num_keys, 1,

==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1

    stage_1 = PBKDF2(password, salt, p * 128 * r, 1, prf=prf_hmac_sha256)


==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1
                b"".join(data_out),
                key_len * num_keys, 1,
                prf=prf_hmac_sha256)

==================================================
Rule: PyQuery: Rule 4 | PyCrypto Value: ""
    dk = PBKDF2(password,
                b"".join(data_out),
                key_len * num_keys, 1,

==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1

    stage_1 = PBKDF2(password, salt, p * 128 * r, 1, prf=prf_hmac_sha256)


==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1
                b"".join(data_out),
                key_len * num_keys, 1,
                prf=prf_hmac_sha256)

==================================================
Rule: PyQuery: Rule 4 | cryptography Value: 8tVxDsGNLt7cjjZ0iQTO+A==
        # Salt is hard-coded
        salt=b"\xf2\xd5q\x0e\xc1\x8d.\xde\xdc\x8e6t\x89\x04\xce\xf8",
        iterations=100_000,

==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1

    stage_1 = PBKDF2(password, salt, p * 128 * r, 1, prf=prf_hmac_sha256)


==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1
                b("").join(data_out),
                key_len * num_keys, 1,
                prf=prf_hmac_sha256)

==================================================
Rule: PyQuery: Rule 4 | PyCrypto Value: ""
    dk = PBKDF2(password,
                b"".join(data_out),
                key_len * num_keys, 1,

==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1

    stage_1 = PBKDF2(password, salt, p * 128 * r, 1, prf=prf_hmac_sha256)


==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1
                b"".join(data_out),
                key_len * num_keys, 1,
                prf=prf_hmac_sha256)

==================================================
Rule: PyQuery: Rule 4 | PyCrypto Value: ""
    dk = PBKDF2(password,
                b"".join(data_out),
                key_len * num_keys, 1,

==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1

    stage_1 = PBKDF2(password, salt, p * 128 * r, 1, prf=prf_hmac_sha256)


==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1
                b"".join(data_out),
                key_len * num_keys, 1,
                prf=prf_hmac_sha256)

==================================================
Rule: PyQuery: Rule 4 | PyCrypto Value: ""
    dk = PBKDF2(password,
                b"".join(data_out),
                key_len * num_keys, 1,

==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1

    stage_1 = PBKDF2(password, salt, p * 128 * r, 1, prf=prf_hmac_sha256)


==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1
                b"".join(data_out),
                key_len * num_keys, 1,
                prf=prf_hmac_sha256)

==================================================
Rule: PyQuery: Rule 4 | PyCrypto Value: ""
    dk = PBKDF2(password,
                b"".join(data_out),
                key_len * num_keys, 1,

==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1

    stage_1 = PBKDF2(password, salt, p * 128 * r, 1, prf=prf_hmac_sha256)


==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1
                b"".join(data_out),
                key_len * num_keys, 1,
                prf=prf_hmac_sha256)

==================================================
Rule: PyQuery: Rule 4 | cryptography Value: ""
Assignment:         salt = bytes(self.name.encode('utf8')) + b'\x00' + p2s

        kdf = PBKDF2HMAC(algorithm=hashalg, length=_inbytes(self.keysize),
                         salt=salt, iterations=p2c, backend=self.backend)
        rk = kdf.derive(plain)

==================================================
Rule: PyQuery: Rule 4 | cryptography Value: utf8
Assignment:         salt = bytes(self.name.encode('utf8')) + b'\x00' + p2s

        kdf = PBKDF2HMAC(algorithm=hashalg, length=_inbytes(self.keysize),
                         salt=salt, iterations=p2c, backend=self.backend)
        rk = kdf.derive(plain)

==================================================
Rule: PyQuery: Rule 2 | cryptography Value: ""
Assignment:             fixed_iv = b"\0" * self.fixed_iv_len

                self._cipher = Cipher(self.pc_cls(key),
                                      self.pc_cls_mode(fixed_iv),
                                      backend=default_backend(),

==================================================
Rule: PyQuery: Rule 3 | M2Crypto Value: ""
Assignment:             fixed_iv = b"\0" * self.fixed_iv_len

                self._cipher = Cipher(self.pc_cls(key),
                                      self.pc_cls_mode(fixed_iv),
                                      backend=default_backend(),

==================================================
Rule: PyQuery: Rule 3 | cryptography Value: ""
Assignment:             key = b"\0" * self.key_len

            if isinstance(self.pc_cls, AESCCM):
                self._cipher = Cipher(self.pc_cls(key),
                                      self.pc_cls_mode(self._get_nonce()),

==================================================
Rule: PyQuery: Rule 3 | cryptography Value: ""
Assignment:             fixed_iv = b"\0" * self.fixed_iv_len

            if isinstance(self.pc_cls, AESCCM):
                self._cipher = Cipher(self.pc_cls(key),
                                      self.pc_cls_mode(self._get_nonce()),

==================================================
Rule: PyQuery: Rule 2 | cryptography Value: ""
Assignment:             iv = b"\0" * self.block_size

        self._cipher = Cipher(self.pc_cls(key),
                              self.pc_cls_mode(iv),
                              backend=backend)

==================================================
Rule: PyQuery: Rule 3 | M2Crypto Value: ""
Assignment:             iv = b"\0" * self.block_size

        self._cipher = Cipher(self.pc_cls(key),
                              self.pc_cls_mode(iv),
                              backend=backend)

==================================================
Rule: PyQuery: Rule 3 | cryptography Value: ""
Assignment:             key = b"\0" * key_len


        self._cipher = Cipher(self.pc_cls(key),
                              self.pc_cls_mode(iv),

==================================================
Rule: PyQuery: Rule 3 | cryptography Value: ""
Assignment:             iv = b"\0" * self.block_size


        self._cipher = Cipher(self.pc_cls(key),
                              self.pc_cls_mode(iv),

==================================================
Rule: PyQuery: Rule 3 | cryptography Value: ""
Assignment:             key = b"\0" * tmp_len


        self._cipher = Cipher(self.pc_cls(key),
                              mode=None,

==================================================
Rule: PyQuery: Rule 1 | PyCrypto Value: MODE_ECB

        aes = AES.new(enckey, AES.MODE_ECB)
        rawvideokey = aes.decrypt(encvideokey)

==================================================
Rule: PyQuery: Rule 4 | PyCrypto Value: ""
    dk = PBKDF2(password,
                b"".join(data_out),
                key_len * num_keys, 1,

==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1

    stage_1 = PBKDF2(password, salt, p * 128 * r, 1, prf=prf_hmac_sha256)


==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1
                b"".join(data_out),
                key_len * num_keys, 1,
                prf=prf_hmac_sha256)

==================================================
Rule: PyQuery: Rule 1 | PyCrypto Value: MODE_ECB

    AES_128= AES.new(K, AES.MODE_ECB)
    M      = bytearray(M[:length])

==================================================
Rule: PyQuery: Rule 1 | PyCrypto Value: MODE_ECB

    AES_128 = AES.new(K, AES.MODE_ECB)


==================================================
Rule: PyQuery: Rule 1 | PyCrypto Value: MODE_ECB
        assert len(ciphertext) >= 16
        aes = AES.new(key.contents, AES.MODE_ECB)
        if len(ciphertext) == 16:

==================================================
Rule: PyQuery: Rule 2 | PyCrypto Value: ""
        assert len(plaintext) >= 16
        aes = AES.new(key.contents, AES.MODE_CBC, b'\0' * 16)
        ctext = aes.encrypt(_zeropad(bytes(plaintext), 16))

==================================================
Rule: PyQuery: Rule 4 | PyCrypto Value: ""
    dk = PBKDF2(password,
                b"".join(data_out),
                key_len * num_keys, 1,

==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1

    stage_1 = PBKDF2(password, salt, p * 128 * r, 1, prf=prf_hmac_sha256)


==================================================
Rule: PyQuery: Rule 5 | PyCrypto Value: 1
                b"".join(data_out),
                key_len * num_keys, 1,
                prf=prf_hmac_sha256)

==================================================
