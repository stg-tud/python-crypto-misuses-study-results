Ruleset: 
	javax.crypto.spec.SecretKeySpec
	java.security.SecureRandom
	javax.crypto.SecretKeyFactory
	javax.crypto.Cipher
	javax.crypto.spec.PBEParameterSpec
	javax.crypto.KeyGenerator
	javax.crypto.spec.PBEKeySpec
	javax.crypto.spec.IvParameterSpec

Analyzed Objects: 
	Object:
		Variable: $r5
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase2: void key(java.lang.String)>
		SHA-256: 7320a9b4c8839493586616888ff19f6e7248db405da27f81fddae63211779cff
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer285)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1: void go(int)>
		SHA-256: 6c09b1b72605c8d2f2062530d7bccb6a11083e232f271aaaa8ac864ed7ef8b0f
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase12: void method1(java.lang.String)>
		SHA-256: a70bf9b3aaac20af6da5b572dcef276ee373a0657081e1524afe2f061f6a605
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer265)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1: void go()>
		SHA-256: c197600578de7a4c817f6872894365c84610938a9300ddce9d5202e912e70114
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer84)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase1: void go(java.lang.String)>
		SHA-256: d3a198dc2dea1ca95a7ddcdd126b9e26203e37fc0ae2b5c459fbc52a6ac4d60b
		Secure: true
	Object:
		Variable: $r6
		Type: java.security.SecureRandom
		Statement: specialinvoke $r6.<java.security.SecureRandom: void <init>(byte[])>(r2)
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABPSCase2: void main(java.lang.String[])>
		SHA-256: da331471fb92f2c300e30122ea58db2f769d7fdce00a0c78dc67a6457925b113
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer279)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5: void go(int)>
		SHA-256: 2bfee9e771f8e25edc732c7ed52232e2d2e402bf100284d7728df0782641babf
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.KeyGenerator
		Statement: r3 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r2)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase1: void go(java.lang.String,java.lang.String)>
		SHA-256: ad407472dc08503be26a36ecdc2b0a1913b6ee6bd08e55e5959f05c3650c7db0
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase4: void go(java.lang.String)>
		SHA-256: 3489218b9fe3ba9cfa2e685e0c6c65554e4d9f59ad1f2e35dc24722a3355d093
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.Crypto3: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 5c72981d022ce4de9c6e6b4c15849c2c353ffc95783f7561c54d2933a9d7cd45
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto2: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: afa6097b7d35f1805bf48bffc5716f1c292271d15865e668d0c45348ca64cd22
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase2: void go()>
		SHA-256: 60f4d40d600fb55c8a91a7f6e4b63ff1b387ea557a7c626855ce5ddaa40abe38
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase2: void go(java.lang.String)>
		SHA-256: 41fb3cce4d950008bb832f8c0574fd58bb4e76bb2ca852a4f88002b0416250d5
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, i1)
		Method: <org.cryptoapi.bench.pbeiteration.CryptoPBEIteration1: void method1(int)>
		SHA-256: ce15797ad4211f62cba9ad5d30a964f9bf385ece7723e0f2e2e7666beaa59ca
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.ecbcrypto.CryptoECB1: void method1(java.lang.String)>
		SHA-256: 391dad26f1fb009ec9b5c04d11b703d5fea3172ea8ff9dfdd29fe40784a23f
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC3: void go(java.lang.String)>
		SHA-256: f1614cd3d7e11aadadf23e16a76ce34d523ffa8594ecfe6f93bc8a365023a7db
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10: void go()>
		SHA-256: 72c8565d1c1cd567d9523952902484b19bba7d2744e0c7ab07d74ac1a67957f6
		Secure: true
	Object:
		Variable: $r1
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r0, i0)
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsABICase3: void method2(byte[],int)>
		SHA-256: 702c648f9c5a93a639a90dd31c079a98314716da7f31cde5a1029b296b0f3dce
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer177)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2: void go()>
		SHA-256: c44e281fced84d00002b16a161bc04fc389b5692e63592ca7bb5fa85e6e4243a
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.SecretKey
		Statement: r4 = virtualinvoke r3.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase1: void go(java.lang.String,java.lang.String)>
		SHA-256: 742829c13bb26e9f2917be9bc69f6b9d5a961bbbbbded181ccc4c12c3fcd2e07
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>(byte[])>($r3)
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsBBCase2: void main(java.lang.String[])>
		SHA-256: 9324d02a0e1ebd005f164ad62319266994b62570999cabeceea6bebecac66e02
		Secure: true
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABPSCase1: void main(java.lang.String[])>
		SHA-256: 91fe50cd6a27cc5b09791a4e0ca2b52f189df278f3b64b5f534e23e2a7892e24
		Secure: false
	Object:
		Variable: varReplacer13
		Type: java.lang.String
		Statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r8, varReplacer13)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABHCase1: void main(java.lang.String[])>
		SHA-256: 539fcc16acdaeb03e7d14839b56ea0b772357530fa117549dc1fe06f221235ae
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer243)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase3: void go()>
		SHA-256: cf598a34737d0dbdaf8c51ec746f41c129ae24bdad4346fc50eddcd0651960ea
		Secure: false
	Object:
		Variable: varReplacer9
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r8, varReplacer9)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABPSCase1: void main(java.lang.String[])>
		SHA-256: a230fcad74bad82b62e988219d3778b0be73d5757b7074a57fd3bd988cee6e7f
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r8, varReplacer9)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABPSCase1: void main(java.lang.String[])>
		SHA-256: a3fab2aa38c0061849c33bff2152f9782fe4a02a8d2d004bb35c6c2475f2ef14
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.CryptoPredictablePBE: void method1(java.lang.String)>
		SHA-256: 3bea3f0c8897bb905972daaa82154c954287a357c0aa8fa073aeb936c443b77a
		Secure: true
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer202)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1: void go(byte[])>
		SHA-256: c89f8a963d787d421be2f10ecdb264ba1b522db213d37030baceeecc8c47cbc7
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5: void go()>
		SHA-256: be2a9895d6c8cdbcb7a6494295c64eff618d41ac8117c81d54c7f8d764c50d5
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto5: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: bc2298b023c5f73793629cdb28de29327459fc07c722ac340f0b26ad078630a
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase1: void go(int)>
		SHA-256: b30b4877ea42581d823bd46b0b36eec2964d66cfc9b33c9e821b0d908b5e6cbc
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3: void go(int)>
		SHA-256: bd3b33f4c0a89deb9832d6d5bd85e20fb74816717a26d8b5958dca3bb9328c35
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto2: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 5b0b7e43f2ba3ddd93f354b7730c7756243e814eb498cab62914a019a052ff00
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase3: void go()>
		SHA-256: 89695aefa29faac6137b49a929d1650e0209d6d4187181e8c0f30d5aed46fefa
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r1)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1: void go(byte[])>
		SHA-256: 67b4c0129f639509eb652c140065500dcd6188ceea7697126d473978300f62de
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsCorrected: void key2()>
		SHA-256: a2d36e20b64d7cc1881d592115b2a2a8c050039da95ce90e33125e53e148af0
		Secure: true
	Object:
		Variable: b1
		Type: byte
		Statement: specialinvoke $r6.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r7, r3, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordCorrected: void key()>
		SHA-256: 3676f7757902290c834e20cfa4672f21e70cc623d0e2f4925440bd137e3be3b9
		Secure: false
	Object:
		Variable: $r10
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r12, varReplacer33)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABHCase2: void main(java.lang.String[])>
		SHA-256: 2b2f86d9c6d024c7f87f27dec4c29d7506f1fcfa29991ecd2e90b32008250482
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r1)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1: void go(byte[])>
		SHA-256: d1a5932a726b32af5966ca9d054677850c292e5e4fec6ec3896b2cd382455b3d
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r3.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase1: void go(java.lang.String)>
		SHA-256: 8692c452993544c751efc6db8d429230d146d861e85bd2b6cd1d00003da4f98e
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer76)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABMC1: void go(java.lang.String)>
		SHA-256: dacc0658628c54be0a41db91d80ba5e9bb35456cc133ad74de6ea4498b5e8711
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer233)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2: void go(int)>
		SHA-256: 3214b2f206a9abdf4488644abf9c526c7b25ce5453913fee7560c4f5e0ef93f8
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordCorrected: void key()>
		SHA-256: 97e578d87b6c7bbf5f29eb06b94c8d85b116d8e2d001983d03e879d2e854804c
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer241)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase3: void go()>
		SHA-256: dd6f910d1b3b4633f14511536274db7b542c7fedeaa5b00c0b345f395b83be9f
		Secure: false
	Object:
		Variable: b1
		Type: byte
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, r1, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.CryptoPredictablePBE: void method1(java.lang.String)>
		SHA-256: 9f1d0fec2605ca6f139855c7a8b6d6c46ac09312c0c746fda23416fa551f095c
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto6: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: a3ec9d2ec17fc6ed05f2c5744e375db344e29ef9a0eb73fed0a52172677f028
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase12: void method1(java.lang.String)>
		SHA-256: 6fe66c3ac1dc3673f7a344c0120a8d1d1d9488c3d69a1004f625a3d98c453b07
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.pbeiteration.CryptoPBEIteration1: void method1(int)>
		SHA-256: 8b753168109c3ed4e7d7385203b082ad8d7bff9a9ac9338ebe0b8cd360910914
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase5: void go()>
		SHA-256: f5f5ea78ffffb5057baf5c515295dd4669182159afeade6fdf213794a3e730a9
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1: void go(int)>
		SHA-256: 93ddca6b0a4e05902395ab42c3d6000ec31fcd41c8348c390c59f7d3589b769c
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase13: void method1(java.lang.String)>
		SHA-256: e857a5609d1d3f2a986974179aafdba353cc6e373b2b18a3596912947224e6e8
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer171)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1: void go(byte[])>
		SHA-256: 6bb2f0b85cc7c80b97987fdd290ba6d2ef9ed07da1b9aa67c8962f179518314a
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC4: void go(java.lang.String)>
		SHA-256: 1204ad30860ca7583f2bb80606c3e4d2c65a3f46a9cc45702539cfd17a697f2d
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABMC1: void go(byte[])>
		SHA-256: bb98df5714e0c145771d806ac91fdb9b9dc229129c545d073306dbaa94e8ef06
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer167)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1: void go(int)>
		SHA-256: 72cac3bd1228a982e8be8ee65779e09476c1fbe2342fd3ff117a5d9eafd82e34
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r5, varReplacer20)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyBBCase1: void main(java.lang.String[])>
		SHA-256: c714d67f7efbe14b310172159dc574b87c7b745d6ffc0ec01afc70a8d3226cca
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer278)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5: void go(int)>
		SHA-256: 926bc7828ef76409fd101164a57c6d4bf7451e0caf28f41c649eaaf4ff0f9fc9
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer254)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase5: void go()>
		SHA-256: fa135698edb61b37c501dd83b6744f53d793e26633506d987f5a942841808373
		Secure: false
	Object:
		Variable: r5
		Type: byte[]
		Statement: virtualinvoke r4.<java.security.SecureRandom: void nextBytes(byte[])>(r5)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected: void go()>
		SHA-256: 190b1eba08aa675bab008bbc01771d2494a76413faea06b2755ab8a4d5ace780
		Secure: true
	Object:
		Variable: $r8
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r8.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r9)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1: void go(int)>
		SHA-256: 574a8c4676ae24fe6b5ec4df0b44b2ff8602f5ada8c5fba09af8f6bf72ca7f42
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3: void method2(byte[])>
		SHA-256: f919b85f57b43c17222b17ea34b234e7e998d4eb38280e05d5506b1215615c0b
		Secure: true
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r4, varReplacer17)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase1: void go(java.lang.String)>
		SHA-256: a20ba4b6ebb2ba070f4a6919b0fb77daef5715f68ee8da817c5e8101e5c611e6
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC3: void go(java.lang.String)>
		SHA-256: 7c716e53fb7bf5a62f8a658df8ec6f7623b612d372c23784daf5647427938eb6
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer191)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1: void go()>
		SHA-256: 4b3699a3ee93c6bd3e1dee014bfbe64d57f048a454664d50e5697fd45df698d9
		Secure: true
	Object:
		Variable: r5
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto2: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 87c833965ca91d8f8dc0741540b78ea35bd6e436bc342d726ba70c6619d1530e
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r3, varReplacer39)
		Method: <org.cryptoapi.bench.staticsalts.CryptoStaticSalt1: void method1(byte[])>
		SHA-256: 224f7cf90fd733c655253f626bc604851cfac9434668ccc3e58a80caedb32a51
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC4: void go(java.lang.String)>
		SHA-256: bd89107993143482ada2bd1366daa67d2d7ea79e056e4c660be9c965eefe5fb1
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto3: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 5abc24a5dbf0d490d88af14b187b2398492270b81b33719462f3bb5a1fa65352
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto3: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 26ccc3e65886ceb1cb94c164ae7eb27a02232b74411ba7ff13cd93408ca3af1
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer284)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1: void go(int)>
		SHA-256: 8842532ce93da203fad68c0951f2691df17132bf867b2fdd0644861700b310d0
		Secure: false
	Object:
		Variable: r6
		Type: javax.crypto.Cipher
		Statement: r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer341)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2: void go(java.security.KeyPairGenerator,java.security.KeyPair)>
		SHA-256: f49d0a18a0fa4007d717948fec9f3f1159969760fd5480851594d294e38af8f2
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.Cipher
		Statement: $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r2)
		Method: <org.cryptoapi.bench.predictablecryptographickey.Crypto: void <init>(java.lang.String)>
		SHA-256: 51384c72f0bac54a80f3f29c25ed17c1549cdc79ec5ce427651c67fd8ca9061d
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer257)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3: void go(int)>
		SHA-256: 72817063b437c096129048048f18fb4c08bb082548b527b2b30a48f81e208691
		Secure: false
	Object:
		Variable: $r6
		Type: java.security.SecureRandom
		Statement: specialinvoke $r6.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase1: void main(java.lang.String[])>
		SHA-256: 6ebabab276a94bea494b0e706df885a616639c89ee09f71df9f35e10190c91a3
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer40)
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsABPSCase1: void key2(int)>
		SHA-256: b1f7cf53cbfcaf52c1cd641aee46f85392f2b10f68361b7977cac894e7ee2f3b
		Secure: false
	Object:
		Variable: r5
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto6: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 4257ad7b9a27ad46827b17c72b8afe38f77aa52c3c6ccc9bc28259625a4320f4
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r3.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABMC1: void key(java.lang.String)>
		SHA-256: 50b4405286b48634ef065cd2ba6cda95037c59e1f2ec6c7957b63e4f1c487094
		Secure: true
	Object:
		Variable: $r6
		Type: java.security.SecureRandom
		Statement: specialinvoke $r6.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1: void go(int)>
		SHA-256: 404e3aaa6f3beb854692033e97a590ba4e4d353ec7dbbe5d7e3db1909f56db2
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase3: void go(java.lang.String)>
		SHA-256: 374fdfd8c775168c8300042599570bdb73b552b73ddfa9b3342544897c00a2be
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: virtualinvoke r2.<java.security.SecureRandom: void nextBytes(byte[])>(r1)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABPSCase1: void main(java.lang.String[])>
		SHA-256: 6fdd0e2b4d4712a1fbb57ab966f91f07c23b00d681c5c530e1e18d4d1ecd765f
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer251)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4: void go(int)>
		SHA-256: 90a56c09f79627a6ffbab69e1202207e764d522bba45b7acbe54b2048857734
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer260)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3: void go(int)>
		SHA-256: 774220302e7d858ce40b6415ad1e1430d00d1e6491cf6200d0f28a095f00542f
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABHCase1: void main(java.lang.String[])>
		SHA-256: 5b587fc5aa004dda3dab172c69f6d7193e5ea06c5e24e63a6c298a7e213cf8d1
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase3: void main(java.lang.String[])>
		SHA-256: 21a636579d4ca6d181053f1c1d677d2ecee9f0c58025d1dfa5993d3d6d8497f9
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1: void method1(byte[])>
		SHA-256: 5f6e8d8c55e9fd6c5e441fa8074780ca0bf9a1363e76b9d9d52827a35c10fd37
		Secure: true
	Object:
		Variable: r6
		Type: javax.crypto.Cipher
		Statement: r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer314)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1: void go(int)>
		SHA-256: f772224e21f4e48405008a57dd4bc13af4e2bad0b0e3dbb880765d48ac6e8776
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABMC1: void go(java.lang.String)>
		SHA-256: 653345afd5295d7efa4553fea0adc89b2f1902bce768fbe131df858994b24754
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoCorrected: void go()>
		SHA-256: 2b0f1006c0f800b91a768a52a1566fd527f094ed96847d0560e79400a344206c
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase13: void method1(java.lang.String)>
		SHA-256: 165e5e74c3a780737221b2e5efad079f03d56e4586891fe960582ef8f8493c9e
		Secure: false
	Object:
		Variable: $r8
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r8.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r5)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected: void go()>
		SHA-256: 20caaa7fc368a59964dc95ef17fc4611d769e09bd94edba796c34d7e83fe95c7
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase14: void method1(java.lang.String)>
		SHA-256: 2c1561a91f22b09c7b4d1cf5233ef276faed92b12dbb0c63c5cfcddb765d9737
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r3.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase1: void key(byte[])>
		SHA-256: d4e9a681918e0d61f523ef8a4765e544a67d1bc5fda157cfafd5ea230498576c
		Secure: true
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer34)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected: void main(java.lang.String[])>
		SHA-256: 8f3a62450b035b750a874262835a99f304c04a7bdf46b7ccc551d3818332b024
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase1: void go(byte[])>
		SHA-256: da272843cd966e34289df6bd997cc3274b8f655e96e434528fbdc5589245906
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer90)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1: void go(int)>
		SHA-256: 29b9d9efa9037a482c082d44a654e302e497c0f96db205043af4a2120b1cd66f
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.KeyGenerator
		Statement: r3 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r2)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC1: void go(java.lang.String,java.lang.String)>
		SHA-256: e3717262e8cc33b22a62f64b73f689a5795606a6aa619febe4da4c17db613bc5
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r5, varReplacer16)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABMC1: void go(java.lang.String)>
		SHA-256: efb875e0c13704d74f59de8bac7135a739b5a66e75c84194b42763fdf5936a9d
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r6)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2: void go()>
		SHA-256: c4904876af1a3cc38f5434bb2ad3b48f77c4aa37cd92e58c507486328d1c1071
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.SecretKey
		Statement: r4 = virtualinvoke r3.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1: void go(byte[])>
		SHA-256: eb97ace9dba677b1434a3a7a29120571e52ded237618f19d3a4ec5d62dc4a2e6
		Secure: true
	Object:
		Variable: r5
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto5: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 4431be2e152d9f8d17d5359ea9fe00e6d52fb6be0d0cd20cf7f22c4a829ecee4
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase3: void go(java.lang.String)>
		SHA-256: 8e30f07816abfd972780a34e9fba653d3e82a13c9f36f76b5c8d2813b52a9dc7
		Secure: false
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC1: void go(java.lang.String,java.lang.String)>
		SHA-256: 22826956e7bb07cbb7fe276e02b67699c942ec0a2c5c0691424b2affbf7fb58b
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEBBCase1: void key2()>
		SHA-256: 9f46a22e2a1fb5a12978a9afb012de05f3a63c1b466f285221a06a675b1c2212
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase15: void method1(java.lang.String)>
		SHA-256: c60184b26682b6511441d8460452f8120c7c6fe7d13df0b0f684b82be2ebbc4b
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.CryptoPredictableSeed1: void method1(byte[])>
		SHA-256: a5151aaf92ec07766de7026472eaa8b2bd6f2cf5b13f0e060ca131254532d666
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer249)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4: void go(int)>
		SHA-256: db2af4bf5f67f8d0888a821df34ecf5897dc4768384fbe7c77d7cd868ecd4c8b
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase5: void method2(byte[])>
		SHA-256: 2d98f100b33227ee91247a3de8e61e67d73a81303e4068b0f3e10fcb3f9dcc80
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer93)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoCorrected: void go()>
		SHA-256: a4db765d86708098a7ffc4193c9ac02843798d3a5ba26616370f9e1b986e59ef
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r5)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8: void go()>
		SHA-256: 1982b6807336268711a81bca75b90c9b22cc1107b9ac0588137405977ee6a1f6
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2: void go(int)>
		SHA-256: a9f6b3dbe49603ec4f0819e14ab692ced94eca9f8fa3abd4eb5da765c93c96e4
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer293)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoCorrected: void go()>
		SHA-256: e933bfe8466f19b6ac16d609db2d338f9074964231b6b66920f6811ebad3d212
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.Crypto5: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 9141478b0efc690f889b77bb7f0fec65a40ac4d0d36acdb8417a29a49930ab4f
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer193)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1: void go()>
		SHA-256: fad7920a1a5200dde0d7fcdc2b0a6df2ca5afd45d55a0a32a2e9ceff7d9ab2fe
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase4: void go(java.lang.String)>
		SHA-256: c5e3aa69ae4cd3f16d4796c6fee0a1f8f0a079bad6fe591508aa288f5a308c37
		Secure: false
	Object:
		Variable: varReplacer16
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r5, varReplacer16)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABMC1: void go(java.lang.String)>
		SHA-256: 2898bbc3e60963b74ab8d806c5b12c7f6683e811f8d51040c598f694004b293e
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC5: void go(java.lang.String)>
		SHA-256: 522788bd58e2cfa18ada629f01b6e36090842d7c7325d9411025c23b17e4d95d
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r4, varReplacer21)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase3: void method2(java.lang.String)>
		SHA-256: 8d4950aecb83ae66049f21ffb9dc9c75c925534384e21c9ae13b1e7bc8550057
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer324)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABPSCase1: void go(int)>
		SHA-256: c4101e6611be1cb692394bdd20b500f6f7da35f8ae25aca56e094e8cba53e6d6
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer195)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1: void go()>
		SHA-256: 22a922849b3dc083a1ca1455e4d1276a1a0a9aecdbae432ba25db86291d61bc9
		Secure: true
	Object:
		Variable: b2
		Type: byte
		Statement: specialinvoke $r3.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r4, r9, s1, b2)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABPSCase1: void key(int)>
		SHA-256: d33052de4fb4d3bd97c54af72afbd78b9fdc7ab9fe75ab8f89e14fca370dbb79
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase9: void go(java.lang.String)>
		SHA-256: c3d3adb15f175e7a91de1c3732a831cc5589f71685c32f0d076ec844c008668f
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: virtualinvoke r0.<java.security.SecureRandom: void nextBytes(byte[])>(r1)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase3: void method1(int,java.security.SecureRandom,javax.crypto.spec.PBEParameterSpec)>
		SHA-256: 9b6c890ba07f41789cc04d96026257b416528025a0954807a91126d09575d564
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEBBCase1: void key2()>
		SHA-256: 3154eeef73e95930a5c837ef3024bbfa779892da89633d31e52bfb344834550d
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase2: void go(java.lang.String)>
		SHA-256: 1989b357dd164067bd19fac966838d7d133299e7239804e0ded600ed6d24e4f3
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r4)
		Method: <org.cryptoapi.bench.ecbcrypto.CryptoECB1: void method1(java.lang.String)>
		SHA-256: 93b7326c92ffbd8fb66c7c6fe6181f45304c766fa9c06f7ad64fc349c7c53c05
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer82)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1: void go()>
		SHA-256: 55a63519a405c6e966896514786730c72ca65d6b009b16ea44864eca322537b
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6: void go()>
		SHA-256: ae0a92d07fc658725f702740ac9a86ecc2c2fb83f6fa65bcc278598d47c7a697
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r1, i0)
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsABICase1: void key2(byte[],int)>
		SHA-256: 9b5fedb206dbed783695687351f7ac0e266051fcfdb22d6d47d33b1c6bbaa1c
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsBBCase1: void main(java.lang.String[])>
		SHA-256: 3d087f2b518b420bcaf0abfe4819346b0bb6d09ff7ce4be249d4315d94a1d8e6
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase1: void key(byte[])>
		SHA-256: 4a933ff85f88e3d82ff3e26fde221ae9ec8a3cb1d28d2a5d7738e58860623cbc
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase9: void go(java.lang.String)>
		SHA-256: e2c00539aadd3a7c381215c7192d9ad1bc14e2dd51afdeb3433250815d141470
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABPSCase2: void main(java.lang.String[])>
		SHA-256: 950cb5f41d5d26adbce03f679bdc0a60b21c0060a5cc9a36083442e7fdff4269
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto5: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 297b643091bc1b1b9fca8d2a69820f9883ddf294a440823e96179210f45c151f
		Secure: false
	Object:
		Variable: b1
		Type: byte
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase2: void key(java.lang.String)>
		SHA-256: 37a4b354308799bcdab9afe973e8c1cee3c5964872bd93a55485baa69f4c9da4
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase2: void key2()>
		SHA-256: e81dc5f4616ffe918950c1761b824c872343dbcf55212e892ca1103150b6b4a
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto4: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 23ad87df13727298e24388a0191c05383eb7f2b00d1ec24f5b1dd8de7575d977
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase15: void method1(java.lang.String)>
		SHA-256: 30cac82c09bfce9be60cab9cd17e735a8e4726e0751b135cc9e8df0bd130b2bc
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC2: void go(java.lang.String)>
		SHA-256: 65a1e22783e76d26782a961ef944ea60603670e8f2fab0fabeeb7364ee5e59ef
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsABPSCase1: void key2(int)>
		SHA-256: 79fe4d02f6e89e58e171bfad464d706b6247122ebfa2f70b36f91bea09948f40
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, i0)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABMC1: void go(int)>
		SHA-256: cdbd86e3700e94d9100808af649c2726ea441996039189794686b8bd04cfa3ca
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer335)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMC1: void go(int)>
		SHA-256: 74fcc8031ac72bd164dadc1abf7a54219f4b5296f023157941b0e52562e027e3
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer234)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2: void go(int)>
		SHA-256: 38f54428f716899c01a780a9d480b8166cda2b4cc28146bb8419f960f9f83077
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>(byte[])>($r2)
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase6: void method2(byte)>
		SHA-256: 1a44ec38b7bf2bed164a2d57f1c5f4af8698b928d040584519c67d3d955cfeaf
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer252)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4: void go(int)>
		SHA-256: 9915320124d9e90be161992f2086411f0cdd8157d2598cd9d13c827f2a9a3640
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer329)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1: void go()>
		SHA-256: 7d91d631ab0784e0dde3c4ecb4d06a7df0966b23ccfcaa2783ae73986f85c6e2
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5: void go()>
		SHA-256: 667102c0996963376dc43e2bc1477fbd18ba748e77c74254df6e9e8136fea7c1
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.KeyGenerator
		Statement: r3 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer170)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1: void go(byte[])>
		SHA-256: febef2725892151a212f39cadc69d9422ac34de941d1db5ead073b5dc37d679
		Secure: true
	Object:
		Variable: $r6
		Type: java.security.SecureRandom
		Statement: specialinvoke $r6.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABHCase1: void go()>
		SHA-256: 6acea8788b7342023313d9c8ba3c9b858e4ed3053d3dc5901e9f36a9cb7948b8
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer255)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase5: void go()>
		SHA-256: 71dd0c33e2d8b9396677fe26b6225467a14633fe6394f6ac7df84cdd75bd56b4
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r1, i0)
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsABMC1: void key2(byte[],int)>
		SHA-256: 63f8864b5402036b1218d2d45733e2c5dc738e26b955fcb7ed25e21e91d3f681
		Secure: false
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: specialinvoke $r5.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2: void key()>
		SHA-256: 11faa4f55d5e54bcf8a38ebd78e92fdfb2c34484c979eb80010eeeac743c043c
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase2: void key2()>
		SHA-256: 932f8894aeaf714daaf4c4090d2461bbf41ee75f7d70f741bd6adc0b5e589134
		Secure: true
	Object:
		Variable: b1
		Type: byte
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase3: void method2(java.lang.String)>
		SHA-256: d76c9661fb2344d731da6f40b073c93ee557590a0043ffdc1bcb8e8eda429343
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto3: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: cda5fd47ab495598045c54405b5c33800b0423fcd30ad12be790409963f4dc7b
		Secure: false
	Object:
		Variable: $r2
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r2.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r1, i0)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase3: void method1(int,java.security.SecureRandom,javax.crypto.spec.PBEParameterSpec)>
		SHA-256: 47a05889a4990a69142258b598334e49d1fe2e602f19ea60d1174f4be2f92ee
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r5)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6: void go()>
		SHA-256: 9d0a4923d2c81c1e239a0ddc216c98fc6d829f55706d22d67ac8a4c09d6a9f41
		Secure: true
	Object:
		Variable: varReplacer7
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r5, varReplacer7)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase2: void go()>
		SHA-256: fe19ce936724b715089d49c73602b647a4ec00687debb61c91a625211adf0786
		Secure: false
	Object:
		Variable: b1
		Type: byte
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABMC1: void key(java.lang.String)>
		SHA-256: 44bf40596994c6e74796d8ceb937de632bb242cbce0743e55a844b551a3f1955
		Secure: false
	Object:
		Variable: $r6
		Type: java.security.SecureRandom
		Statement: specialinvoke $r6.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordCorrected: void go()>
		SHA-256: ccbcee9e59c0aa87ca2ae138480fd7fd79efbce4e6acc699cb4932bf2173b71
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r4, r9, s1, b2)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABPSCase1: void key(int)>
		SHA-256: e592a1969ca75b3ef2dc7183784c260b697ac529460caefae452d43575b0a900
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer199)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3: void method2(byte[])>
		SHA-256: b4512dfd14e1bbaa276ddd0a3865d6bea5288154ba9534245fe84f0b2c896fe8
		Secure: false
	Object:
		Variable: b1
		Type: byte
		Statement: specialinvoke $r6.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>(r1, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2: void key()>
		SHA-256: 8cf5ee04e4dfa186368182244bf72063525f7090646fbc6a21aa751cab2eab68
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, r1, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.CryptoPredictablePBE: void method1(java.lang.String)>
		SHA-256: 749f1e6e3954eaa6dea817670a969d170e4c0cec69fcc0129871d32cdcf6e2d8
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer95)
		Method: <org.cryptoapi.bench.ecbcrypto.CryptoECB1: void method1(java.lang.String)>
		SHA-256: 976ff727a04c5f59603fc37d01a08466df6514eac16e4791f7849a9ab8aa14dd
		Secure: true
	Object:
		Variable: varReplacer20
		Type: java.lang.String
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r5, varReplacer20)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyBBCase1: void main(java.lang.String[])>
		SHA-256: 188b8cc7de748231187e5e1dc9e415047f6c75959707d3fee18b0669ed36f3a
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1: void go()>
		SHA-256: e6667a769160a31d05fe20afc340a87fa28bf57fb4f1bf446a5ea4408f536d8f
		Secure: true
	Object:
		Variable: $r19
		Type: java.security.SecureRandom
		Statement: specialinvoke $r19.<java.security.SecureRandom: void <init>(byte[])>($r20)
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABHCase4: void main(java.lang.String[])>
		SHA-256: c17691313414e2499abb8b1cdfea67b3f9b055c5bd104776ef63d7e96b7c3365
		Secure: true
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBECorrected: void key2()>
		SHA-256: 9db8e09f36c50f1fb7edfb1a54d204400569830e90ece88afaf93134dff70643
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r1, s0)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABPSCase1: void main(java.lang.String[])>
		SHA-256: 81d9f3486167cc02059dc30d8bfbc5e081a4c712b1ec1c0d3e0ea9e3701aa7f4
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r0)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3: void method2(byte[])>
		SHA-256: cb51c56857b073cf10541471c7b42aa800e1d95c1e9f4bf62133e97325592ee6
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase14: void method1(java.lang.String)>
		SHA-256: e151465ac7a8adf2d9c3f2afac7bd662c4518bfacb4f2a685f35f0f5952b4c8
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer83)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1: void go()>
		SHA-256: 9dcefd643ca376cc7358d7aa4f610cb87313dd3655e31991c53f3559e9f1d664
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7: void go()>
		SHA-256: 59ce287f549cc5a004aeb8972ee0c2b9c22c46ec13aa111f165ac4e154278717
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto6: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 577883757a8d66417e747be38445492fe1d015ee7bedff697eafd2634c1de98f
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8: void go()>
		SHA-256: 6fda858dba412ea871f0a4aa693b979c73781d759e8c70686816d9b14f786d78
		Secure: false
	Object:
		Variable: b1
		Type: byte
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase1: void go(java.lang.String)>
		SHA-256: b5af75f595be28873045515472875db3b6a047359476f0f21402b3948aa338e3
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2: void go()>
		SHA-256: dd9fb115651b728f52ef37369a4bf3d2077c361537df3d6468d704bea5b41670
		Secure: true
	Object:
		Variable: $r16
		Type: java.security.SecureRandom
		Statement: specialinvoke $r16.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABHCase2: void main(java.lang.String[])>
		SHA-256: e23c932213e30fb7ada5c3bf3bb31458a8cd7e957834b32f805c19b23aa6433a
		Secure: true
	Object:
		Variable: $r11
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r11.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer47)
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsABHCase1: void key2()>
		SHA-256: bf540629d5c631ea32c779112de465ed347a22527ce182218633838622fac018
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7: void go()>
		SHA-256: 1549bd2c079f16d79981ac7e559c5e5b4ad759c145bc12692bd7c47cf9811907
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase12: void method1(java.lang.String)>
		SHA-256: a19a90a9212d0467bc89fc0b3c1af96e5ea1b38147d20c18a312d0dd23fc55c
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>(byte[])>($r3)
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABMC2: void go(byte)>
		SHA-256: 35c6015fcf7989feeccadddee1380015468d34c7673c7556a5353b61533c0296
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer89)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1: void go(int)>
		SHA-256: 2d23f27c30633dcf7f6197db29fd3f4fdfdae8a854ced0f2b19ef5d1b4742d64
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r3.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1: void key()>
		SHA-256: ee2f155c24b91978bff0d100e0c561c24698e590f1744d26c0e3f4cbc66e00db
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1: void go(int)>
		SHA-256: f9b63366e483c6e641aabd825a6f6853607decb2c91effc5108938707228ec99
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto4: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 160c8faa35c01a055a0957c71a7cbe53267171d0e80f5bc12a3da34f49fbc85b
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r5)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10: void go()>
		SHA-256: f172617c0766f076fdb99129e24cc867f2abffa66c598f0c7623596313ac7df2
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase3: void method1(java.lang.String)>
		SHA-256: 489ba22f5d5f98172f5310f8dc00f71443c222c346c51ed90c1734c0b0672630
		Secure: true
	Object:
		Variable: r9
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r9)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABPSCase1: void key(int)>
		SHA-256: e06db882b8b1b4b080068d24f50ac024d401a9e38ac2c31c5e60e5ddf60b56a3
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.Crypto6: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 97a8506709366159824d31cb08e8bbc027de1be64e03e7daf1b59959d32bcf5c
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoCorrected: void go()>
		SHA-256: 239d2331b23ee39aef92cd64bdfb0c5e7ff54b2fa9c3696572290c75b80b346d
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer169)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1: void go(int)>
		SHA-256: a93ff9f3221232b7ec63bad6ba147bfe9315cb55ae0a523c7ff9daf766210f94
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer280)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5: void go(int)>
		SHA-256: d320e3e0302a814c9e300c2e9ac384033e26902cb1aa7e4b8706073bcb44b774
		Secure: false
	Object:
		Variable: varReplacer17
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r4, varReplacer17)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase1: void go(java.lang.String)>
		SHA-256: b94e3e9c3af513424755261f4364eb1daaae07395e2d5421300af2df321185b1
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABPSCase1: void main(java.lang.String[])>
		SHA-256: 52555a6d5e9cb16378b2a2df4a64c866edc52bb50ba5f698fa433d4e94558e77
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase2: void key(java.lang.String)>
		SHA-256: 5a010fd7fb3895e4d29665a0c79ed963012928dcba152511d312fe3273b7a7c2
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase14: void method1(java.lang.String)>
		SHA-256: 1a06fdae3c5e34581f287856170543a8f13bafb8fb4cc6880004bd801479294c
		Secure: false
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABMC1: void key(java.lang.String)>
		SHA-256: 65ed837f5efd942441433043146512510ebed572c3c259d5cfd5f35fb2cd2edc
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer267)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1: void go()>
		SHA-256: f4b2ed15c7b4b8fd5d774e69656d8143c7f042894d920966e4b1863afd7bc052
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase3: void method1(java.lang.String)>
		SHA-256: 82f3907da64978a5fee5bf105d91dfad596516d0502c88c05e3ca2a96553f0e8
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase11: void method1(java.lang.String,java.lang.String)>
		SHA-256: 8cc98e92fcb6c1185a8ab1bb0f51b8562bfba2624d2ff75eec67711fd212f6ba
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer87)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1: void go(int)>
		SHA-256: d36ec61cf826ef23e4bb0dc4ff9ba65d6be70cd4fb10745e5df06031a834b133
		Secure: true
	Object:
		Variable: varReplacer21
		Type: java.lang.String
		Statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r4, varReplacer21)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase3: void method2(java.lang.String)>
		SHA-256: 861f7d922c547e13db79338e442c4b8ba1238b1600195417d3190d198d641108
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, r2, varReplacer123, varReplacer124)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2: void go()>
		SHA-256: d303a867fcc6e3ff045b0805c254d3a725e243ebd9edae1e2f24dbed463f2e19
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC2: void go(java.lang.String)>
		SHA-256: eac6c5bdafc6c83cb635909a35f13f05751e9a28c0f0dae1124ee329d4bad553
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r5)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase2: void go()>
		SHA-256: 51cfe795f2ddf3c0626768238bad1e9113f037c9237159456c09d35a5b84d861
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1: void go()>
		SHA-256: 862cf6e8f6a05a141cdd9b65526c75c5ac9fc6c6afe16958b4c3548a84a0e26f
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase1: void go(java.lang.String)>
		SHA-256: 8a6790b3d5baccdcd925f0727cc62d3112e21072984cb70cc598c64a704624c3
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer299)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase4: void go()>
		SHA-256: 68218580cbd48712680e7747d78a4729e96ea5825d2116bda42dae4e855f1a6e
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABPSCase1: void main(java.lang.String[])>
		SHA-256: a04267e986d13b704d3124a9c98ca169c213b86095398ff590bc80c66635b742
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r7.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r4)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1: void go()>
		SHA-256: fd83cd57fff222224b7bdec64c8c5363369581e6f1456c6ed9eaf1e44561255d
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer259)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3: void go(int)>
		SHA-256: 212c75399204e4cfec7010749d6305768b07a105b4cf59ea2feab3ac773ab3e8
		Secure: true
	Object:
		Variable: r5
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto3: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: b1377f01c3b3a0c1786978e359ac599c97359e6043cf1f005a6855430600ee5f
		Secure: false
	Object:
		Variable: $r1
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r1.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r2, i0)
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsABICase2: void key2(int)>
		SHA-256: df87c2dd95d2d6ba3719672aff51ab8a6e2da33f8a097aa351267f2a5333aa02
		Secure: false
	Object:
		Variable: r6
		Type: javax.crypto.Cipher
		Statement: r6 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer330)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1: void go()>
		SHA-256: 871ec2e7332613b6c5ed2ad40434fbf27cc12ff777d6080e0577ab79ffb9cd54
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.KeyGenerator
		Statement: r3 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer204)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1: void go(byte[])>
		SHA-256: df5ffbd3f4fc071e7e8d3e485b13f8526b53e29f803c92cf18b5c375ac7461f6
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected: void go()>
		SHA-256: 1184be6988df117c27162884e7c60041719f90709f785fd9de23c9f692149c17
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABMC1: void go(int)>
		SHA-256: 3e258c082aa1b7409c3b568044abd8582dfb2a7cf1780d8e88baa7d6d46a1fbb
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsCorrected: void main(java.lang.String[])>
		SHA-256: ec0145b82d6dfeb10bcd1e2c84cbf3ed9abcf23c87ad61ecd5e0911acddfd016
		Secure: true
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase1: void go(java.lang.String,java.lang.String)>
		SHA-256: 330ecd50e2614391a443b11a27dbcf63af24512bf9be60e4f1a4801ebaba2a1f
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer247)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2: void go()>
		SHA-256: c790c32558217b0542ef3e27f03032e963c2078d13928b2bef93339210b35aac
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4: void go(int)>
		SHA-256: a3d037ea88ed36ed3c72ed5f867260dcbae5caafdae0578b404ec97884126283
		Secure: true
	Object:
		Variable: $r6
		Type: java.security.SecureRandom
		Statement: specialinvoke $r6.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABHCase4: void main(java.lang.String[])>
		SHA-256: b0755e4399b523e138ee7cd3f865f243c0c994f35acbf90831264bbf7348f5ff
		Secure: true
	Object:
		Variable: r9
		Type: byte[]
		Statement: virtualinvoke r4.<java.security.SecureRandom: void nextBytes(byte[])>(r9)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1: void go(int)>
		SHA-256: 31ef87d529e13e00539e9ba54cfd9187637aa0f4aa7112e3188352b699a2419e
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6: void go()>
		SHA-256: 514a13b275b97d7f0bfc7a795f3be1d90b5d9b18fed91d943e1b10d28d0dc637
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1: void go()>
		SHA-256: 8427dd3ecd225fb5eb7acd56236d17f9d6730ecf582c096db008ce3764e30ce0
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer282)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1: void go(int)>
		SHA-256: 9e34bccf4206aab2bbc471431f741574ba6746a45265d38bfc8f7cbbaefaaed0
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>(byte[])>($r3)
		Method: <org.cryptoapi.bench.predictableseeds.CryptoPredictableSeed2: void method1(byte)>
		SHA-256: 71398f39e05f9fd1871c9d26cb33aa4c663111756c023b8fcca3e445a728ffac
		Secure: true
	Object:
		Variable: $r6
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r6.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>(r1, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2: void key()>
		SHA-256: 4de65d487850098a69f08f9baf36bb39d2e31bb1cf114d7c5f39f552f6bb8de1
		Secure: true
	Object:
		Variable: $r10
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r10.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r3, i0)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABHCase1: void key2()>
		SHA-256: 45a6b6306b3365c9fbace4881b2ce08c1f9ffb28716fb2f9e38a01a8c8f6d40
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer235)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2: void go(int)>
		SHA-256: e7b997f5bf9a738b5135b7ef852e85dfea8b04e20da3608e0c572d1846ad6cff
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase3: void go(java.lang.String)>
		SHA-256: ba3e2ebda176cc74f85b5431f6d9d63a2e0804cecd1aa84c48976d211b36d998
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer92)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoCorrected: void go()>
		SHA-256: 66f729ec33abb30a3be8767d47649aa5d9ec27ac92c5a3a75bdf409647a7fc17
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer185)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected: void go()>
		SHA-256: 798209bd751f4d8bdfb12849a0e27a7ef2b6413563459ed77a28dfdbfbfcd974
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase1: void go(int)>
		SHA-256: 1a81c025705cd8c210fda52dca97e804acd5bcf7f73fdb7d3743f471453fa47e
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsABPSCase1: void key2(int)>
		SHA-256: 234c7fe145eee0ae093bda739eb1c764aa22509a98660255b59dbc36666e879
		Secure: true
	Object:
		Variable: $r5
		Type: java.security.SecureRandom
		Statement: specialinvoke $r5.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABPSCase1: void key(int)>
		SHA-256: 3b1a03d1a2e44b329efa4fe7ccdd7622cb2d4a81b8f01aa2798c15debabfa0fc
		Secure: true
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r3.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2: void key()>
		SHA-256: e2adec780edb59f5595a9555d06a4237e42e3c7fd3ec43581e2d3e46b3156165
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase1: void go(java.lang.String)>
		SHA-256: dd873e096518be79d94ba5f884f81eaf047aeffdcf0a2df24cbb0496c74f5b48
		Secure: true
	Object:
		Variable: $r9
		Type: java.security.SecureRandom
		Statement: specialinvoke $r9.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABHCase1: void key2()>
		SHA-256: 13b194c1942f4893563d9d30b846ed186493fa4ed75c1d6ef4aa1d31da4a38b8
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer139)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEBBCase1: void key2()>
		SHA-256: 8ebb04e956cbe5116378f3f2c701a66f1e90c218458c287c03a0ffdf67270cb8
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase2: void go(java.lang.String)>
		SHA-256: a5d67583084dce74794fa3b631aeb26f19d69f42c86dcbe517ee5faeae7c8bef
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.pbeiteration.CryptoPBEIteration1: void method1(int)>
		SHA-256: b8127d5ae3423aa284f054ddcd4035de19a97ec593963601857d0382a7288298
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer52)
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsCorrected: void key2()>
		SHA-256: 9f058f17383d9b7be4e9405d0e4a8896154f4ba6228e2a2b1b7d73d465588ce7
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.SecureRandom
		Statement: specialinvoke $r7.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected: void go()>
		SHA-256: e71c8383b1ab5a54a718eca099f37ef053aa98837e103854d0fd5f29c5370238
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer206)
		Method: <org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1: void method1(byte[])>
		SHA-256: bb184a13e61b914124c95b65d0ee978fe981b9b8019f381d1b0caa98f8002f9b
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10: void go()>
		SHA-256: 1f76c97b9668b9cf4f3ee4a8702ef748fbd8371e8f4fe5b936603d50724b7cfa
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer248)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2: void go()>
		SHA-256: 7e8d8501c4cf8e91ac5bbcb006d58211ec333547de2fd098c04fdca2c299083f
		Secure: false
	Object:
		Variable: b1
		Type: byte
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1: void key()>
		SHA-256: aab58ed242826001b90b7d08ca0f3e3692fb5f7110e1030b0888adea0fe99af
		Secure: false
	Object:
		Variable: $r8
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto4: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: bb7af6811388eb730de6e882176e3dfc26eb35493cf2e58522c579eb27b1a52f
		Secure: false
	Object:
		Variable: $r7
		Type: java.security.SecureRandom
		Statement: specialinvoke $r7.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected: void main(java.lang.String[])>
		SHA-256: 9f093d0e4c7190726b90b367edad8bd65cd0d1ba0898bb6347c67b798964e1ca
		Secure: true
	Object:
		Variable: $r3
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r3.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r1, varReplacer53)
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsBBCase1: void key2()>
		SHA-256: 89bae0c2af0fbc9a9bd3075552d58eb23037ffa2aa8896aae402c6584de7681a
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC2: void go(java.lang.String)>
		SHA-256: ac8796ee2bdda3977f9beeea167ed87f2f4d272135546dcdaaef1a478ec9cef6
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer205)
		Method: <org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1: void method1(byte[])>
		SHA-256: 2f428fbee93a0b0c3d4a07b48a0e30ad3b77d0cc9232a857970f33c6019ed886
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer332)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMC1: void go(int)>
		SHA-256: 5d6dd5f5ce3f647ec9ec08c65659fbbf6711461557a5b8c0b16641c92fbf52ba
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer188)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2: void go()>
		SHA-256: e612c17c56b82a11a8f747b23d70a795a25bf6b98bc4da32eb13d0922c1fc3e2
		Secure: false
	Object:
		Variable: r3
		Type: byte[]
		Statement: virtualinvoke r2.<java.security.SecureRandom: void nextBytes(byte[])>(r3)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABHCase1: void key2()>
		SHA-256: eea684ae258238ff44edb8230b68112d398bc7175f0896c3658365d675d486ee
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase13: void method1(java.lang.String)>
		SHA-256: 7bbf54fe3b70dff9792e072d211c1737a08cf4485af7fa2b32daa9681ab50997
		Secure: false
	Object:
		Variable: $r15
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r15.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r7)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2: void go()>
		SHA-256: a2da4f6548be812bb6d4fcf70dcfff15fc4f61c4222f6e8d6e650db746723252
		Secure: false
	Object:
		Variable: $r9
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r15, varReplacer36)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected: void main(java.lang.String[])>
		SHA-256: 8e83a7da71b86fd18a0b7dd9c3edb719e032c930337103671976b119887a2919
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABPSCase2: void main(java.lang.String[])>
		SHA-256: 251639c70ddbc0c93214eda67c514717234ceac56a1896090f4eb1f63f5e6161
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.staticsalts.StaticSaltsCorrected: void key2()>
		SHA-256: 79e135764d352eac28353d77df764918f82b307797296f933e4802a474ba5693
		Secure: true
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2: void go()>
		SHA-256: 8d6820ae08a54ac0d7db0fa12ea2bddfe096a2a0305e036b78a0668a6bfefcd1
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer77)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase3: void method1(java.lang.String)>
		SHA-256: 3a6409528545aa76311d739ed0f0d18d62df27fe7234adc01de618ee8bab3446
		Secure: true
	Object:
		Variable: varReplacer124
		Type: int
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, r2, varReplacer123, varReplacer124)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2: void go()>
		SHA-256: 133f62d7ec2c93f4ab5ad11403d410adb63ffe9c68d5fe702cb857cd4757fb9
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase3: void method2(java.lang.String)>
		SHA-256: f967b334fd4e010e88126d20bc8d9192cefe6b9f685fc63058f44d629c4fa1c8
		Secure: true
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r3.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase3: void method2(java.lang.String)>
		SHA-256: 4d69bc2a7ebde438f856dbf364872c8876f61b829cc66a8985bcf569a4ea3388
		Secure: true
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>(byte[])>($r2)
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase4: void go()>
		SHA-256: 74d5b5d053a74570194449f1215bac713aa2bbc5f4b7427074cf35c4320a671c
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r7)
		Method: <org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1: void method1(byte[])>
		SHA-256: 54e503892202fcf21fc353dd239d4c8b715ec5dfbcc455cff41d4b1859e58309
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1: void go(int)>
		SHA-256: 505e07cfc577e960adce93daeddeef5f3354a8de9eac3afe4527fc4b64332fdf
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8: void go()>
		SHA-256: 5fcb3a06063d271d69a7f8e883f266023d3e1e9a64b38776f95cca343a99d74
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer187)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected: void go()>
		SHA-256: 231918b5c9812e4da504fef01f7a34988959b7fb5d07cd7b19eb62e370deb577
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer340)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2: void go(java.security.KeyPairGenerator,java.security.KeyPair)>
		SHA-256: d5a38d28dc88e2f77b2ec6489b1f52cc6d663aefec384e5fc5295ef6fa4dc503
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase3: void method2(java.lang.String)>
		SHA-256: b3f4222a7301e5898d4e12950bbc1fb2e8107ced1a2e1d5e480e87921fdbb960
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5: void go(int)>
		SHA-256: e193e82a86a2f1ad0e090b22a082823036f9a3423c60c3ab9b9a8f31f50c5f22
		Secure: true
	Object:
		Variable: b1
		Type: byte
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r7, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase1: void key(byte[])>
		SHA-256: eaa260d4709dc9b165563c57fb6358552167b33b63990c0f666e4b5b09ba89ad
		Secure: false
	Object:
		Variable: $r5
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r7, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase1: void key(byte[])>
		SHA-256: 65633f9266a7ebb0a333b3419339b771a9306c796333cdad349342141800c42e
		Secure: false
	Object:
		Variable: $r11
		Type: byte[]
		Statement: $r12 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r11)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected: void main(java.lang.String[])>
		SHA-256: 98615894e91439a8a3d6669e3f6e7583a20ed11800d550056b6a735aeb44a5dd
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto2: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 189419399682cc63a5d5d7def9a888b119ebff67f8efe33a2bf208bf0a816671
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2: void go()>
		SHA-256: dc2d3e929c63d9d083aedc10ad2ef1875257198050a0e256eff9062162eec631
		Secure: true
	Object:
		Variable: $r4
		Type: java.security.SecureRandom
		Statement: specialinvoke $r4.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1: void key()>
		SHA-256: 96f4a296a8feb626321bff096e168e7e6dfb3a60936562631875987710ee81d1
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC5: void go(java.lang.String)>
		SHA-256: 751c0ac49cd460e33d5426e0f2f6d4256669e6d4bef13b23a5b5fae41e921bc4
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r8, varReplacer13)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABHCase1: void main(java.lang.String[])>
		SHA-256: 79bd034ce2c725160cb3f3554b4d225e2649e14b951aa7a216aa1c435551a5bd
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase1: void go(java.lang.String)>
		SHA-256: 5ee27ec3cb93d9cf683a039472b5c1094edadc0f6695a4c063e7e3321a5e1839
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.Crypto4: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 1f529fb6481929ee47c91930e75ebdf81782cf19783b1c3e97948ae4051a8efc
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase4: void go()>
		SHA-256: 12709fab2e6ef67b1b9970e0a618b72d41ae35e135025a37eb9729a294226c2d
		Secure: false
	Object:
		Variable: $r3
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r5, varReplacer7)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase2: void go()>
		SHA-256: 403ba95c40225492d5dc840557d8edcdba092672e545057f987ad2079ab07493
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase11: void method1(java.lang.String,java.lang.String)>
		SHA-256: a846a2a5d57fca62999eb659612bcc5bcf5a026f2ca0400c2cc3e258a7e580e3
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r3.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase2: void key(java.lang.String)>
		SHA-256: e7e521fbcb864ed896f330202d6e93baa6de10f0fc96bec139023251c037d451
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, i0)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase1: void go(int)>
		SHA-256: d99d5eecbfc3910f2c9094cd1fce0731f1ea6cafb38f7cbecc46f3d5ff16025b
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC3: void go(java.lang.String)>
		SHA-256: e3117455aec4a49150b5802ef37f1c629adab383eea1daa561c359776e97016e
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer298)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase4: void go()>
		SHA-256: 4e3419f5f261fef0ed004da1d281673b24b6c2bedb6065ab7b75909d2576e33f
		Secure: false
	Object:
		Variable: r1
		Type: byte[]
		Statement: virtualinvoke r2.<java.security.SecureRandom: void nextBytes(byte[])>(r1)
		Method: <org.cryptoapi.bench.predictablepbepassword.CryptoPredictablePBE: void method1(java.lang.String)>
		SHA-256: 640a40a7a36b7ae61e01d55ca618ca529cd702be796d8c9968fb0cc9164c7cdf
		Secure: true
	Object:
		Variable: r5
		Type: byte[]
		Statement: $r8 = virtualinvoke r4.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r5)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto4: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 9b6f075fcd66575e9f0612c34cf9387b944c4b6f73b5ebf0f742bb1f8c63b7a7
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer79)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase2: void go()>
		SHA-256: 311290a9f32fdc56b1ba8d733a8a7a377330b8f04e27f81632bedcfa011c5a2b
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase3: void go()>
		SHA-256: 57aebccb0250ab3bead8a38cb6139a9ae4a9c601f149e15df2e5dab8eab803cd
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABMC1: void go(java.lang.String)>
		SHA-256: db9e0cf32d4a6472fb5dbe079ef18c4c680d86f38814866a7e0f59cad751c140
		Secure: false
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABPSCase1: void key(int)>
		SHA-256: 1dff49b6cc773f8dfd176132a23245890636cbbc814c76ccde43c6af77ae0a26
		Secure: true
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer178)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2: void go()>
		SHA-256: 7352675801709312a94b8bf57ee6505ab30b8528ba9489c74c0b8c31c648cfb6
		Secure: false
	Object:
		Variable: $r12
		Type: byte[]
		Statement: $r12 = virtualinvoke r5.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r11)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected: void main(java.lang.String[])>
		SHA-256: c21f895fbc997bfbac99c446a8dd7cc7e6d1edc4dde08e9671b3ccaa1e4d16ae
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer200)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3: void method2(byte[])>
		SHA-256: 9a0086b4e6928385d4454243cdbe1142e1c2ee9feb4d8ece8fbd9c3018bdd64b
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r0)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase11: void method1(java.lang.String,java.lang.String)>
		SHA-256: 625497398a38bc4095b05517d85aae39d55853ef5b69c8dc58f8034796450e0a
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r5)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5: void go()>
		SHA-256: 51772b7eb5650ef30a94191eadbbdecd022bd74a66d2131d39a74e8e76201121
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer141)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBECorrected: void key2()>
		SHA-256: 9663d4b94888b5ded2d016a18230767b055602bf39c703cddaf666e736c1eeac
		Secure: false
	Object:
		Variable: $r1
		Type: java.security.SecureRandom
		Statement: specialinvoke $r1.<java.security.SecureRandom: void <init>(byte[])>($r2)
		Method: <org.cryptoapi.bench.predictableseeds.PredictableSeedsABICase2: void go(byte)>
		SHA-256: 4c33537b613e926a802bda2443c4f34eb7343c3c6ced820c9549850bd0f1138d
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1: void key()>
		SHA-256: d2825b80dbbafcd7b84749aac1abeb98ea5b65cba771382cf882243fb8f7a3c7
		Secure: false
	Object:
		Variable: $r6
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r6.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r7, r3, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordCorrected: void key()>
		SHA-256: 95e027092fe51368570e192820c5e71e38897a5366717ab0cd792297086803de
		Secure: false
	Object:
		Variable: $r4
		Type: javax.crypto.spec.SecretKeySpec
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r11, $r5)
		Method: <org.cryptoapi.bench.predictablecryptographickey.Crypto: byte[] method1(java.lang.String,java.lang.String)>
		SHA-256: a4f30c445a9b325a29c10bbf9dd31ee8ecd675f53d6c9238009290400710d92
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2: void go()>
		SHA-256: 85ffec3680a9f3f1b3f727ab96f9d8230b5575c6cfa15a8b539c141ff397eb1a
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2: void go()>
		SHA-256: da772c54c0bef5ebfa197dfa5c7a8067efc59b21c8f4bb8be23ca9f2a5e47535
		Secure: false
	Object:
		Variable: $r5
		Type: java.lang.String
		Statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r11, $r5)
		Method: <org.cryptoapi.bench.predictablecryptographickey.Crypto: byte[] method1(java.lang.String,java.lang.String)>
		SHA-256: f4363715d9512e8134472d80c02951acb8d80dd0e6ebbeb7e3d3a2ab859c968a
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto5: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 69364014d084d474d2bfe5068a4228344bf5cd5a014eb1dd64a46c82334acfc4
		Secure: false
	Object:
		Variable: $r7
		Type: javax.crypto.spec.IvParameterSpec
		Statement: specialinvoke $r7.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r4)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1: void go()>
		SHA-256: ec884ba9c09fedcb23d855214a417ae4d79f71f14642947b2cc7da0cdf6a5dc4
		Secure: false
	Object:
		Variable: varReplacer33
		Type: java.lang.String
		Statement: specialinvoke $r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r12, varReplacer33)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABHCase2: void main(java.lang.String[])>
		SHA-256: 5b45e79d1b0ddbf5def1680b1c7271d6ed6cf54990c945d8737195a19fed2425
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBECorrected: void key2()>
		SHA-256: efc1b7a3b259ae95e2d72bb57e8bbe088d5858bbf8ad344de88ceebb90679c8
		Secure: true
	Object:
		Variable: $r2
		Type: java.security.SecureRandom
		Statement: specialinvoke $r2.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.untrustedprng.UntrustedPRNGCorrected: void main(java.lang.String[])>
		SHA-256: 93dfcd4c98650eefa05fc422b0cdc9917dc6055f9703c5a61f5f1c2ef5c9c1fb
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase1: void go(java.lang.String)>
		SHA-256: c9d80f1f46c888f9b25311309c74358d3f60a9beab9fede15e93e95735fcb462
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)
		Method: <org.cryptoapi.bench.brokencrypto.Crypto6: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: 32f6cb3fc75d3956e5458e94d94365dcd63620865b3a25e0ad2ca731f5defa78
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.KeyGenerator
		Statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer190)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2: void go()>
		SHA-256: 87d08e35b84106f84f6253fb3baeac3a29340c0e3ee435e18e65450daeeddf30
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC5: void go(java.lang.String)>
		SHA-256: 770cc402937a1c661c03c2dc91aa89e39c5e7b695bdc7c44885d227106ac56d0
		Secure: false
	Object:
		Variable: varReplacer36
		Type: java.lang.String
		Statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r15, varReplacer36)
		Method: <org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected: void main(java.lang.String[])>
		SHA-256: b4265f4ca26d229e44a578ccbfba44534f468c0aea705c957fc98c42ff2ba0a8
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.SecretKey
		Statement: r4 = virtualinvoke r3.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1: void go(byte[])>
		SHA-256: 781987c9dec67a71ac854e1dca39bee09699efaeb6de37f92322feb7701a509
		Secure: true
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r5)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7: void go()>
		SHA-256: 91c7248cf857abee526a6f227afc51bb844beeb4a7ade6c935a8a874159c3ab9
		Secure: true
	Object:
		Variable: $r5
		Type: javax.crypto.spec.PBEKeySpec
		Statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABMC1: void key(java.lang.String)>
		SHA-256: a59dca38173f6ecc3111a544c67f05b6a36562f20de4be01a4220996a44fcb28
		Secure: false
	Object:
		Variable: r2
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r2)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABMC1: void go(int)>
		SHA-256: e5e912fed5e44feaa6366a613c185da83c20f378ba5eaa78eea1709a034b853e
		Secure: true
	Object:
		Variable: $r4
		Type: javax.crypto.spec.PBEParameterSpec
		Statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, $i0)
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase2: void key2()>
		SHA-256: 788f9173d1d53a948da75aba0a9c08a9ea055e659aa6ae191d57a9c1f13cd47a
		Secure: false
	Object:
		Variable: $r8
		Type: java.security.SecureRandom
		Statement: specialinvoke $r8.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.predictablekeystorepassword.PredictableKeyStorePasswordABPSCase1: void go(int)>
		SHA-256: 490db0aeef9f44ca50b5a9a6c99bf8aa5024023bd522ccde40b150919c346ddf
		Secure: true
	Object:
		Variable: r5
		Type: javax.crypto.Cipher
		Statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer316)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3: void method1(int)>
		SHA-256: 12276d96c29952d639de5a75a5f5af3ace3b4968479958362395f8958191ed2f
		Secure: false
	Object:
		Variable: $r3
		Type: java.security.SecureRandom
		Statement: specialinvoke $r3.<java.security.SecureRandom: void <init>()>()
		Method: <org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABPSCase1: void main(java.lang.String[])>
		SHA-256: 8ba9f023c009a2360fb4dc82fadf6e25133c0d65cc969f5abf9945e30929f9ad
		Secure: true
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC4: void go(java.lang.String)>
		SHA-256: c1b3e569e93a62744f9fc0394abe9b06b2838abe5d5f5edca51213180e42890e
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer311)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1: void go(int)>
		SHA-256: 18fb46c24b0cf309ba126aeaa23b737b84a291c36f54bfd622fa9688381b6d75
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.Crypto2: byte[] encrypt(java.lang.String,java.lang.String)>
		SHA-256: fa15a6c4c69f31a097b570ea8c0dce75128fe7a6bf934cedcf67efee5c835c55
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.SecretKey
		Statement: r4 = virtualinvoke r3.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC1: void go(java.lang.String,java.lang.String)>
		SHA-256: 1af98b052a55fa56b7915081f6b06c4ada8e5201bdb23ac5222f41090afb6e4
		Secure: false
	Object:
		Variable: r4
		Type: javax.crypto.Cipher
		Statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase9: void go(java.lang.String)>
		SHA-256: b9a86b5876c5bb1ae88033c32970c7c395882a7ea3df45d31419eb3d5631c3b3
		Secure: false
	Object:
		Variable: r3
		Type: byte[]
		Statement: virtualinvoke r1.<java.security.SecureRandom: void nextBytes(byte[])>(r3)
		Method: <org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordCorrected: void key()>
		SHA-256: 88886ce0bfbde68da5e1fe5c27b01462961e4f379c2d035e51590dba5b81d683
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase15: void method1(java.lang.String)>
		SHA-256: fdb89adef7e820b83a69c948bc53388cc792b1285cb00c88d4fd2cfe933be607
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.Cipher
		Statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer197)
		Method: <org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1: void go()>
		SHA-256: 2a136b50da484afc818c66e4bf6ca72cd9938e8e3bb1a283a66040235c750748
		Secure: false
	Object:
		Variable: r2
		Type: javax.crypto.Cipher
		Statement: r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer318)
		Method: <org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3: void method1(int)>
		SHA-256: e136ff31e79b3bba5a245f55c529d52c7da477f3c35c75465952fa7127242b71
		Secure: false
	Object:
		Variable: r3
		Type: javax.crypto.SecretKey
		Statement: r3 = virtualinvoke r2.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase4: void go(java.lang.String)>
		SHA-256: aa2fdf200b557da422c713d175386f96e9ff837c1f0c7cb4e704d7227abc6623
		Secure: false
	Object:
		Variable: r1
		Type: javax.crypto.KeyGenerator
		Statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer295)
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoCorrected: void go()>
		SHA-256: 8ff0cb2c2c23ce969d781c20b8b5ead17e5904715b7a9254e460d7d53fb9207c
		Secure: true
	Object:
		Variable: r2
		Type: javax.crypto.SecretKey
		Statement: r2 = virtualinvoke r1.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()
		Method: <org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1: void go()>
		SHA-256: d12cdb51f6190a47a8537a350ab71a00756d866e49a292889bc09521951f421b
		Secure: false

Findings in Java Class: org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABSCase1

	 in Method: void <init>()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #51384c72f0bac54a80f3f29c25ed17c1549cdc79ec5ce427651c67fd8ca9061d)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to init
			at statement: specialinvoke $r2.<org.cryptoapi.bench.predictablecryptographickey.Crypto: void <init>(java.lang.String)>(r1)


Findings in Java Class: org.cryptoapi.bench.staticsalts.StaticSaltsABICase1

	 in Method: void key2(byte[],int)
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #9b5fedb206dbed783695687351f7ac0e266051fcfdb22d6d47d33b1c6bbaa1c)
			Second parameter (with value 1020)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r1, i0)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r1, i0)


Findings in Java Class: org.cryptoapi.bench.staticsalts.CryptoStaticSalt1

	 in Method: void method1(byte[])
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #224f7cf90fd733c655253f626bc604851cfac9434668ccc3e58a80caedb32a51)
			Second parameter (with value 1020)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r1.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r3, varReplacer39)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r1.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r3, varReplacer39)


Findings in Java Class: org.cryptoapi.bench.staticsalts.StaticSaltsABPSCase1

	 in Method: void key2(int)
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #b1f7cf53cbfcaf52c1cd641aee46f85392f2b10f68361b7977cac894e7ee2f3b)
			Second parameter (with value 1020)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r5.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer40)


Findings in Java Class: org.cryptoapi.bench.staticsalts.StaticSaltsABICase2

	 in Method: void key2(int)
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #df87c2dd95d2d6ba3719672aff51ab8a6e2da33f8a097aa351267f2a5333aa02)
			Second parameter (with value 1020)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r1.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r2, i0)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r1.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r2, i0)


Findings in Java Class: org.cryptoapi.bench.staticsalts.StaticSaltsABMC1

	 in Method: void key2(byte[],int)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r1, i0)

		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #63f8864b5402036b1218d2d45733e2c5dc738e26b955fcb7ed25e21e91d3f681)
			Second parameter (with value 1020)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r1, i0)


Findings in Java Class: org.cryptoapi.bench.staticsalts.StaticSaltsABHCase1

	 in Method: void key2()
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r11.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer47)

		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #bf540629d5c631ea32c779112de465ed347a22527ce182218633838622fac018)
			Second parameter (with value 1020)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r11.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer47)


Findings in Java Class: org.cryptoapi.bench.staticsalts.StaticSaltsABICase3

	 in Method: void method2(byte[],int)
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #702c648f9c5a93a639a90dd31c079a98314716da7f31cde5a1029b296b0f3dce)
			Second parameter (with value 1020)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r1.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r0, i0)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r1.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r0, i0)


Findings in Java Class: org.cryptoapi.bench.staticsalts.StaticSaltsCorrected

	 in Method: void key2()
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #9f058f17383d9b7be4e9405d0e4a8896154f4ba6228e2a2b1b7d73d465588ce7)
			Second parameter (with value 1020)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer52)


Findings in Java Class: org.cryptoapi.bench.staticsalts.StaticSaltsBBCase1

	 in Method: void key2()
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #89bae0c2af0fbc9a9bd3075552d58eb23037ffa2aa8896aae402c6584de7681a)
			Second parameter (with value 1020)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r3.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r1, varReplacer53)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.PBEParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r3.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r1, varReplacer53)


Findings in Java Class: org.cryptoapi.bench.predictableseeds.PredictableSeedsABPSCase1

	 in Method: void main(java.lang.String[])
		TypestateError violating CrySL rule for java.security.SecureRandom (on Object #a04267e986d13b704d3124a9c98ca169c213b86095398ff590bc80c66635b742)
			Unexpected call to method setSeed on object of type java.security.SecureRandom. Expect a call to one of the following methods next,generateSeed,nextBytes
			at statement: virtualinvoke r1.<java.security.SecureRandom: void setSeed(byte[])>(r2)


Findings in Java Class: org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABMC1

	 in Method: void go(java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #db9e0cf32d4a6472fb5dbe079ef18c4c680d86f38814866a7e0f59cad751c140)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer75, r3)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #db9e0cf32d4a6472fb5dbe079ef18c4c680d86f38814866a7e0f59cad751c140)
			First parameter (with value "AES/ECB/PKCS5Padding") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)


Findings in Java Class: org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase3

	 in Method: void method1(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #82f3907da64978a5fee5bf105d91dfad596516d0502c88c05e3ca2a96553f0e8)
			First parameter (with value "AES/ECB/PKCS5Padding") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r0)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #82f3907da64978a5fee5bf105d91dfad596516d0502c88c05e3ca2a96553f0e8)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer78, r2)


Findings in Java Class: org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase2

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #51cfe795f2ddf3c0626768238bad1e9113f037c9237159456c09d35a5b84d861)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer80, r2)


Findings in Java Class: org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoBBCase1

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #55a63519a405c6e966896514786730c72ca65d6b009b16ea44864eca322537b)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer81, r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #55a63519a405c6e966896514786730c72ca65d6b009b16ea44864eca322537b)
			First parameter (with value "AES/ECB/PKCS5Padding") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer82)


Findings in Java Class: org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABICase1

	 in Method: void go(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #c9d80f1f46c888f9b25311309c74358d3f60a9beab9fede15e93e95735fcb462)
			First parameter (with value "AES/ECB/PKCS5Padding") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #c9d80f1f46c888f9b25311309c74358d3f60a9beab9fede15e93e95735fcb462)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer85, r3)


Findings in Java Class: org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoABPSCase1

	 in Method: void go(int)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #2d23f27c30633dcf7f6197db29fd3f4fdfdae8a854ced0f2b19ef5d1b4742d64)
			First parameter (with value "AES/ECB/PKCS5Padding") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer89)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #2d23f27c30633dcf7f6197db29fd3f4fdfdae8a854ced0f2b19ef5d1b4742d64)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer88, r2)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #29b9d9efa9037a482c082d44a654e302e497c0f96db205043af4a2120b1cd66f)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer88, r2)


Findings in Java Class: org.cryptoapi.bench.ecbcrypto.EcbInSymmCryptoCorrected

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #66f729ec33abb30a3be8767d47649aa5d9ec27ac92c5a3a75bdf409647a7fc17)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer91, r2)


Findings in Java Class: org.cryptoapi.bench.ecbcrypto.CryptoECB1

	 in Method: void method1(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #93b7326c92ffbd8fb66c7c6fe6181f45304c766fa9c06f7ad64fc349c7c53c05)
			First parameter (with value "AES/ECB/PKCS5Padding") should be any of AES/{CBC, GCM, PCBC, CTR, CTS, CFB, OFB}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r4)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #93b7326c92ffbd8fb66c7c6fe6181f45304c766fa9c06f7ad64fc349c7c53c05)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer94, r2)


Findings in Java Class: org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1

	 in Method: void key()
		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #d2825b80dbbafcd7b84749aac1abeb98ea5b65cba771382cf882243fb8f7a3c7)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)


	 in Method: void main(java.lang.String[])
		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #d2825b80dbbafcd7b84749aac1abeb98ea5b65cba771382cf882243fb8f7a3c7)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: virtualinvoke r1.<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase1: void key()>()


Findings in Java Class: org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase1

	 in Method: void go(java.lang.String)
		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #8a6790b3d5baccdcd925f0727cc62d3112e21072984cb70cc598c64a704624c3)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)


	 in Method: void main(java.lang.String[])
		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #8a6790b3d5baccdcd925f0727cc62d3112e21072984cb70cc598c64a704624c3)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: virtualinvoke r1.<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase1: void go(java.lang.String)>(r2)


Findings in Java Class: org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABPSCase1

	 in Method: void key(int)
		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #e592a1969ca75b3ef2dc7183784c260b697ac529460caefae452d43575b0a900)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r3.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r4, r9, s1, b2)


	 in Method: void main(java.lang.String[])
		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #e592a1969ca75b3ef2dc7183784c260b697ac529460caefae452d43575b0a900)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: virtualinvoke r1.<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABPSCase1: void key(int)>(b0)


Findings in Java Class: org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase1

	 in Method: void key(byte[])
		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #65633f9266a7ebb0a333b3419339b771a9306c796333cdad349342141800c42e)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r7, r2, s0, b1)


	 in Method: void main(java.lang.String[])
		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #65633f9266a7ebb0a333b3419339b771a9306c796333cdad349342141800c42e)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: virtualinvoke r1.<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase1: void key(byte[])>(r4)


Findings in Java Class: org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordCorrected

	 in Method: void key()
		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #95e027092fe51368570e192820c5e71e38897a5366717ab0cd792297086803de)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r6.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r7, r3, s0, b1)


	 in Method: void main(java.lang.String[])
		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #95e027092fe51368570e192820c5e71e38897a5366717ab0cd792297086803de)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: virtualinvoke r1.<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordCorrected: void key()>()


Findings in Java Class: org.cryptoapi.bench.predictablepbepassword.CryptoPredictablePBE

	 in Method: void method1(java.lang.String)
		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #749f1e6e3954eaa6dea817670a969d170e4c0cec69fcc0129871d32cdcf6e2d8)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, r1, s0, b1)


Findings in Java Class: org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABSCase1

	 in Method: void <init>()
		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #749f1e6e3954eaa6dea817670a969d170e4c0cec69fcc0129871d32cdcf6e2d8)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: virtualinvoke $r3.<org.cryptoapi.bench.predictablepbepassword.CryptoPredictablePBE: void method1(java.lang.String)>(varReplacer96)


Findings in Java Class: org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase2

	 in Method: void key(java.lang.String)
		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #7320a9b4c8839493586616888ff19f6e7248db405da27f81fddae63211779cff)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)


	 in Method: void main(java.lang.String[])
		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #7320a9b4c8839493586616888ff19f6e7248db405da27f81fddae63211779cff)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: virtualinvoke r1.<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABHCase2: void key(java.lang.String)>(r3)


Findings in Java Class: org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2

	 in Method: void main(java.lang.String[])
		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #d303a867fcc6e3ff045b0805c254d3a725e243ebd9edae1e2f24dbed463f2e19)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: specialinvoke r1.<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase2: void go()>()


Findings in Java Class: org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABMC1

	 in Method: void key(java.lang.String)
		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #a59dca38173f6ecc3111a544c67f05b6a36562f20de4be01a4220996a44fcb28)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)


Findings in Java Class: org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABMCCase1

	 in Method: void main(java.lang.String[])
		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #a59dca38173f6ecc3111a544c67f05b6a36562f20de4be01a4220996a44fcb28)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: virtualinvoke r1.<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABMC1: void key(java.lang.String)>(r2)


Findings in Java Class: org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase3

	 in Method: void method2(java.lang.String)
		NeverTypeOfError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #b3f4222a7301e5898d4e12950bbc1fb2e8107ced1a2e1d5e480e87921fdbb960)
			First parameter should never be of type java.lang.String.
			at statement: specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r6, r2, s0, b1)


	 in Method: void main(java.lang.String[])
		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #b3f4222a7301e5898d4e12950bbc1fb2e8107ced1a2e1d5e480e87921fdbb960)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: virtualinvoke r1.<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordABICase3: void method1(java.lang.String)>(r2)


Findings in Java Class: org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2

	 in Method: void main(java.lang.String[])
		IncompleteOperationError violating CrySL rule for javax.crypto.spec.PBEKeySpec (on Object #4de65d487850098a69f08f9baf36bb39d2e31bb1cf114d7c5f39f552f6bb8de1)
			Operation on object of type javax.crypto.spec.PBEKeySpec object not completed. Expected call to clearPassword
			at statement: virtualinvoke r1.<org.cryptoapi.bench.predictablepbepassword.PredictablePBEPasswordBBCase2: void key()>()


Findings in Java Class: org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABMC1

	 in Method: void go(int)
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #cdbd86e3700e94d9100808af649c2726ea441996039189794686b8bd04cfa3ca)
			Second parameter (with value 20)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, i0)


Findings in Java Class: org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEBBCase1

	 in Method: void key2()
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #8ebb04e956cbe5116378f3f2c701a66f1e90c218458c287c03a0ffdf67270cb8)
			Second parameter (with value 20)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer139)


Findings in Java Class: org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase3

	 in Method: void method1(int,java.security.SecureRandom,javax.crypto.spec.PBEParameterSpec)
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #47a05889a4990a69142258b598334e49d1fe2e602f19ea60d1174f4be2f92ee)
			Second parameter (with value 20)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r2.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r1, i0)


Findings in Java Class: org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABPSCase1

	 in Method: void main(java.lang.String[])
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #81d9f3486167cc02059dc30d8bfbc5e081a4c712b1ec1c0d3e0ea9e3701aa7f4)
			Second parameter (with value 5)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r1, s0)


Findings in Java Class: org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase2

	 in Method: void key2()
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #788f9173d1d53a948da75aba0a9c08a9ea055e659aa6ae191d57a9c1f13cd47a)
			Second parameter (with value 0)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, $i0)


Findings in Java Class: org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBECorrected

	 in Method: void key2()
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #9663d4b94888b5ded2d016a18230767b055602bf39c703cddaf666e736c1eeac)
			Second parameter (with value 1020)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, varReplacer141)


Findings in Java Class: org.cryptoapi.bench.pbeiteration.LessThan1000IterationPBEABICase1

	 in Method: void go(int)
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #d99d5eecbfc3910f2c9094cd1fce0731f1ea6cafb38f7cbecc46f3d5ff16025b)
			Second parameter (with value 20)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, i0)


Findings in Java Class: org.cryptoapi.bench.pbeiteration.CryptoPBEIteration1

	 in Method: void method1(int)
		ConstraintError violating CrySL rule for javax.crypto.spec.PBEParameterSpec (on Object #ce15797ad4211f62cba9ad5d30a964f9bf385ece7723e0f2e2e7666beaa59ca)
			Second parameter (with value 20)Variable iterationCountmust be  at least 10000
			at statement: specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>(r2, i1)


Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABPSCase1

	 in Method: void go(int)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #a93ff9f3221232b7ec63bad6ba147bfe9315cb55ae0a523c7ff9daf766210f94)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer168, r2, r5)


Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABMC1

	 in Method: void go(byte[])
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #6bb2f0b85cc7c80b97987fdd290ba6d2ef9ed07da1b9aa67c8962f179518314a)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer172, r4, r2)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r1)


Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase2

	 in Method: void go()
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r15.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r7)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #7352675801709312a94b8bf57ee6505ab30b8528ba9489c74c0b8c31c648cfb6)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer176, r2, r8)


Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorCorrected

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #798209bd751f4d8bdfb12849a0e27a7ef2b6413563459ed77a28dfdbfbfcd974)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer186, r2, r6)


Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase2

	 in Method: void go()
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>($r6)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #e612c17c56b82a11a8f747b23d70a795a25bf6b98bc4da32eb13d0922c1fc3e2)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer189, r3, r1)


Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorBBCase1

	 in Method: void go()
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r7.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r4)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #fad7920a1a5200dde0d7fcdc2b0a6df2ca5afd45d55a0a32a2e9ceff7d9ab2fe)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer192, r2, r5)


Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABHCase1

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #2a136b50da484afc818c66e4bf6ca72cd9938e8e3bb1a283a66040235c750748)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer196, r2, r5)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r7.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r4)


Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase3

	 in Method: void method2(byte[])
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #b4512dfd14e1bbaa276ddd0a3865d6bea5288154ba9534245fe84f0b2c896fe8)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer201, r3, r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r0)


Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.StaticInitializationVectorABICase1

	 in Method: void go(byte[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #c89f8a963d787d421be2f10ecdb264ba1b522db213d37030baceeecc8c47cbc7)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer203, r4, r2)


Findings in Java Class: org.cryptoapi.bench.staticinitializationvector.CryptoStaticIV1

	 in Method: void method1(byte[])
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #bb184a13e61b914124c95b65d0ee978fe981b9b8019f381d1b0caa98f8002f9b)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(varReplacer207, r3, r1)

		RequiredPredicateError violating CrySL rule for javax.crypto.spec.IvParameterSpec
			First parameter was not properly generated as randomized
			at statement: specialinvoke $r5.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r7)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase2

	 in Method: void go(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #a5d67583084dce74794fa3b631aeb26f19d69f42c86dcbe517ee5faeae7c8bef)
			First parameter (with value "Blowfish") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #1989b357dd164067bd19fac966838d7d133299e7239804e0ded600ed6d24e4f3)
			First parameter (with value "Blowfish") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #a5d67583084dce74794fa3b631aeb26f19d69f42c86dcbe517ee5faeae7c8bef)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer231, r3)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase2

	 in Method: void go(int)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #e7b997f5bf9a738b5135b7ef852e85dfea8b04e20da3608e0c572d1846ad6cff)
			First parameter (with value "Blowfish") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer235)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #e7b997f5bf9a738b5135b7ef852e85dfea8b04e20da3608e0c572d1846ad6cff)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer232, r2)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #3214b2f206a9abdf4488644abf9c526c7b25ce5453913fee7560c4f5e0ef93f8)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer232, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase3

	 in Method: void go(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #8e30f07816abfd972780a34e9fba653d3e82a13c9f36f76b5c8d2813b52a9dc7)
			First parameter (with value "RC4") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #374fdfd8c775168c8300042599570bdb73b552b73ddfa9b3342544897c00a2be)
			First parameter (with value "RC4") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #374fdfd8c775168c8300042599570bdb73b552b73ddfa9b3342544897c00a2be)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer239, r3)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC3

	 in Method: void go(java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #e3117455aec4a49150b5802ef37f1c629adab383eea1daa561c359776e97016e)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer240, r3)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #e3117455aec4a49150b5802ef37f1c629adab383eea1daa561c359776e97016e)
			First parameter (with value "RC4") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #f1614cd3d7e11aadadf23e16a76ce34d523ffa8594ecfe6f93bc8a365023a7db)
			First parameter (with value "RC4") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase3

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #cf598a34737d0dbdaf8c51ec746f41c129ae24bdad4346fc50eddcd0651960ea)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer242, r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #cf598a34737d0dbdaf8c51ec746f41c129ae24bdad4346fc50eddcd0651960ea)
			First parameter (with value "RC4") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer243)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #dd6f910d1b3b4633f14511536274db7b542c7fedeaa5b00c0b345f395b83be9f)
			First parameter (with value "RC4") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer241)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC4

	 in Method: void go(java.lang.String)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #c1b3e569e93a62744f9fc0394abe9b06b2838abe5d5f5edca51213180e42890e)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer244, r3)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #c1b3e569e93a62744f9fc0394abe9b06b2838abe5d5f5edca51213180e42890e)
			First parameter (with value "RC2") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #bd89107993143482ada2bd1366daa67d2d7ea79e056e4c660be9c965eefe5fb1)
			First parameter (with value "RC2") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.Crypto3

	 in Method: byte[] encrypt(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #5abc24a5dbf0d490d88af14b187b2398492270b81b33719462f3bb5a1fa65352)
			First parameter (with value "Blowfish") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer245, r3)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #26ccc3e65886ceb1cb94c164ae7eb27a02232b74411ba7ff13cd93408ca3af1)
			First parameter (with value "Blowfish") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase2

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #c790c32558217b0542ef3e27f03032e963c2078d13928b2bef93339210b35aac)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer246, r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #c790c32558217b0542ef3e27f03032e963c2078d13928b2bef93339210b35aac)
			First parameter (with value "Blowfish") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer247)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #7e8d8501c4cf8e91ac5bbcb006d58211ec333547de2fd098c04fdca2c299083f)
			First parameter (with value "Blowfish") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer248)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase4

	 in Method: void go(int)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #9915320124d9e90be161992f2086411f0cdd8157d2598cd9d13c827f2a9a3640)
			First parameter (with value "RC2") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer252)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #9915320124d9e90be161992f2086411f0cdd8157d2598cd9d13c827f2a9a3640)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer250, r2)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #90a56c09f79627a6ffbab69e1202207e764d522bba45b7acbe54b2048857734)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer250, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase5

	 in Method: void go()
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #71dd0c33e2d8b9396677fe26b6225467a14633fe6394f6ac7df84cdd75bd56b4)
			First parameter (with value "IDEA") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer255)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #71dd0c33e2d8b9396677fe26b6225467a14633fe6394f6ac7df84cdd75bd56b4)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer253, r2)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #fa135698edb61b37c501dd83b6744f53d793e26633506d987f5a942841808373)
			First parameter (with value "IDEA") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer254)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.Crypto4

	 in Method: byte[] encrypt(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #160c8faa35c01a055a0957c71a7cbe53267171d0e80f5bc12a3da34f49fbc85b)
			First parameter (with value "RC4") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #23ad87df13727298e24388a0191c05383eb7f2b00d1ec24f5b1dd8de7575d977)
			First parameter (with value "RC4") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer256, r3)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase3

	 in Method: void go(int)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #72817063b437c096129048048f18fb4c08bb082548b527b2b30a48f81e208691)
			First parameter (with value "RC4") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer257)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #72817063b437c096129048048f18fb4c08bb082548b527b2b30a48f81e208691)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer258, r2)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #774220302e7d858ce40b6415ad1e1430d00d1e6491cf6200d0f28a095f00542f)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer258, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase11

	 in Method: void method1(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #625497398a38bc4095b05517d85aae39d55853ef5b69c8dc58f8034796450e0a)
			First parameter (with value "DES/ECB/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r0)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #8cc98e92fcb6c1185a8ab1bb0f51b8562bfba2624d2ff75eec67711fd212f6ba)
			First parameter (with value "DES") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #625497398a38bc4095b05517d85aae39d55853ef5b69c8dc58f8034796450e0a)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer261, r3)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.Crypto2

	 in Method: byte[] encrypt(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #189419399682cc63a5d5d7def9a888b119ebff67f8efe33a2bf208bf0a816671)
			First parameter (with value "DES/ECB/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #5b0b7e43f2ba3ddd93f354b7730c7756243e814eb498cab62914a019a052ff00)
			First parameter (with value "DES/ECB/PKCS5Padding") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer262, r3)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase1

	 in Method: void go(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #330ecd50e2614391a443b11a27dbcf63af24512bf9be60e4f1a4801ebaba2a1f)
			First parameter (with value "DES/ECB/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #330ecd50e2614391a443b11a27dbcf63af24512bf9be60e4f1a4801ebaba2a1f)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer263, r4)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #ad407472dc08503be26a36ecdc2b0a1913b6ee6bd08e55e5959f05c3650c7db0)
			First parameter (with value "DES") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r3 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC2

	 in Method: void go(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #eac6c5bdafc6c83cb635909a35f13f05751e9a28c0f0dae1124ee329d4bad553)
			First parameter (with value "Blowfish") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #65a1e22783e76d26782a961ef944ea60603670e8f2fab0fabeeb7364ee5e59ef)
			First parameter (with value "Blowfish") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #eac6c5bdafc6c83cb635909a35f13f05751e9a28c0f0dae1124ee329d4bad553)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer264, r3)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase1

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #f4b2ed15c7b4b8fd5d774e69656d8143c7f042894d920966e4b1863afd7bc052)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer266, r2)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #c197600578de7a4c817f6872894365c84610938a9300ddce9d5202e912e70114)
			First parameter (with value "DES") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer265)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #f4b2ed15c7b4b8fd5d774e69656d8143c7f042894d920966e4b1863afd7bc052)
			First parameter (with value "DES/ECB/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer267)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.Crypto6

	 in Method: byte[] encrypt(java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer268, r3)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #577883757a8d66417e747be38445492fe1d015ee7bedff697eafd2634c1de98f)
			First parameter (with value "IDEA") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #32f6cb3fc75d3956e5458e94d94365dcd63620865b3a25e0ad2ca731f5defa78)
			First parameter (with value "IDEA") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.Crypto5

	 in Method: byte[] encrypt(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #69364014d084d474d2bfe5068a4228344bf5cd5a014eb1dd64a46c82334acfc4)
			First parameter (with value "RC2") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r7)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #297b643091bc1b1b9fca8d2a69820f9883ddf294a440823e96179210f45c151f)
			First parameter (with value "RC2") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>($r6)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer272, r3)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase9

	 in Method: void go(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #b9a86b5876c5bb1ae88033c32970c7c395882a7ea3df45d31419eb3d5631c3b3)
			First parameter (with value "IDEA") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #c3d3adb15f175e7a91de1c3732a831cc5589f71685c32f0d076ec844c008668f)
			First parameter (with value "IDEA") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #b9a86b5876c5bb1ae88033c32970c7c395882a7ea3df45d31419eb3d5631c3b3)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer273, r3)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC5

	 in Method: void go(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #751c0ac49cd460e33d5426e0f2f6d4256669e6d4bef13b23a5b5fae41e921bc4)
			First parameter (with value "IDEA") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #770cc402937a1c661c03c2dc91aa89e39c5e7b695bdc7c44885d227106ac56d0)
			First parameter (with value "IDEA") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #770cc402937a1c661c03c2dc91aa89e39c5e7b695bdc7c44885d227106ac56d0)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer274, r3)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase14

	 in Method: void method1(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #1a06fdae3c5e34581f287856170543a8f13bafb8fb4cc6880004bd801479294c)
			First parameter (with value "RC2") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r0)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #e151465ac7a8adf2d9c3f2afac7bd662c4518bfacb4f2a685f35f0f5952b4c8)
			First parameter (with value "RC2") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r0)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #1a06fdae3c5e34581f287856170543a8f13bafb8fb4cc6880004bd801479294c)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer275, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase7

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #1549bd2c079f16d79981ac7e559c5e5b4ad759c145bc12692bd7c47cf9811907)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer276, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase6

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #ae0a92d07fc658725f702740ac9a86ecc2c2fb83f6fa65bcc278598d47c7a697)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer277, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase5

	 in Method: void go(int)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #2bfee9e771f8e25edc732c7ed52232e2d2e402bf100284d7728df0782641babf)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer281, r2)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #d320e3e0302a814c9e300c2e9ac384033e26902cb1aa7e4b8706073bcb44b774)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer281, r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #d320e3e0302a814c9e300c2e9ac384033e26902cb1aa7e4b8706073bcb44b774)
			First parameter (with value "IDEA") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer280)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABPSCase1

	 in Method: void go(int)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #8842532ce93da203fad68c0951f2691df17132bf867b2fdd0644861700b310d0)
			First parameter (with value "DES/ECB/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer284)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #8842532ce93da203fad68c0951f2691df17132bf867b2fdd0644861700b310d0)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer283, r2)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #6c09b1b72605c8d2f2062530d7bccb6a11083e232f271aaaa8ac864ed7ef8b0f)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer283, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase5

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #be2a9895d6c8cdbcb7a6494295c64eff618d41ac8117c81d54c7f8d764c50d5)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer286, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoCorrected

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #e933bfe8466f19b6ac16d609db2d338f9074964231b6b66920f6811ebad3d212)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer294, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase13

	 in Method: void method1(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #e857a5609d1d3f2a986974179aafdba353cc6e373b2b18a3596912947224e6e8)
			First parameter (with value "RC4") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r0)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #165e5e74c3a780737221b2e5efad079f03d56e4586891fe960582ef8f8493c9e)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer296, r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #165e5e74c3a780737221b2e5efad079f03d56e4586891fe960582ef8f8493c9e)
			First parameter (with value "RC4") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r0)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase8

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #6fda858dba412ea871f0a4aa693b979c73781d759e8c70686816d9b14f786d78)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer297, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoBBCase4

	 in Method: void go()
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #68218580cbd48712680e7747d78a4729e96ea5825d2116bda42dae4e855f1a6e)
			First parameter (with value "RC2") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(varReplacer299)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #4e3419f5f261fef0ed004da1d281673b24b6c2bedb6065ab7b75909d2576e33f)
			First parameter (with value "RC2") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(varReplacer298)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #4e3419f5f261fef0ed004da1d281673b24b6c2bedb6065ab7b75909d2576e33f)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer300, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase10

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #1f76c97b9668b9cf4f3ee4a8702ef748fbd8371e8f4fe5b936603d50724b7cfa)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer301, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase15

	 in Method: void method1(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #c60184b26682b6511441d8460452f8120c7c6fe7d13df0b0f684b82be2ebbc4b)
			First parameter (with value "IDEA") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r0)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #30cac82c09bfce9be60cab9cd17e735a8e4726e0751b135cc9e8df0bd130b2bc)
			First parameter (with value "IDEA") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r0)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #c60184b26682b6511441d8460452f8120c7c6fe7d13df0b0f684b82be2ebbc4b)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer302, r2)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase12

	 in Method: void method1(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #a70bf9b3aaac20af6da5b572dcef276ee373a0657081e1524afe2f061f6a605)
			First parameter (with value "Blowfish") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r1 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r0)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #a19a90a9212d0467bc89fc0b3c1af96e5ea1b38147d20c18a312d0dd23fc55c)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer303, r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #a19a90a9212d0467bc89fc0b3c1af96e5ea1b38147d20c18a312d0dd23fc55c)
			First parameter (with value "Blowfish") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r0)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABICase4

	 in Method: void go(java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #c5e3aa69ae4cd3f16d4796c6fee0a1f8f0a079bad6fe591508aa288f5a308c37)
			First parameter (with value "RC2") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r4 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)

		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #3489218b9fe3ba9cfa2e685e0c6c65554e4d9f59ad1f2e35dc24722a3355d093)
			First parameter (with value "RC2") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r2 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #c5e3aa69ae4cd3f16d4796c6fee0a1f8f0a079bad6fe591508aa288f5a308c37)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r4.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer304, r3)


Findings in Java Class: org.cryptoapi.bench.brokencrypto.BrokenCryptoABMC1

	 in Method: void go(java.lang.String,java.lang.String)
		ConstraintError violating CrySL rule for javax.crypto.KeyGenerator (on Object #e3717262e8cc33b22a62f64b73f689a5795606a6aa619febe4da4c17db613bc5)
			First parameter (with value "DES") should be any of {AES, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512}
			at statement: r3 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r2)

		ConstraintError violating CrySL rule for javax.crypto.Cipher (on Object #22826956e7bb07cbb7fe276e02b67699c942ec0a2c5c0691424b2affbf7fb58b)
			First parameter (with value "DES/ECB/PKCS5Padding") should be any of {AES, PBEWithHmacSHA224AndAES_128, PBEWithHmacSHA256AndAES_128, PBEWithHmacSHA384AndAES_128, PBEWithHmacSHA512AndAES_128, PBEWithHmacSHA224AndAES_256, PBEWithHmacSHA256AndAES_256, PBEWithHmacSHA384AndAES_256, PBEWithHmacSHA512AndAES_256}
			at statement: r5 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(r1)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #22826956e7bb07cbb7fe276e02b67699c942ec0a2c5c0691424b2affbf7fb58b)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer305, r4)


Findings in Java Class: org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase1

	 in Method: void go(int)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #18fb46c24b0cf309ba126aeaa23b737b84a291c36f54bfd622fa9688381b6d75)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: specialinvoke $r10.<javax.crypto.SealedObject: void <init>(java.io.Serializable,javax.crypto.Cipher)>(r4, r3)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #f772224e21f4e48405008a57dd4bc13af4e2bad0b0e3dbb880765d48ac6e8776)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: $r12 = virtualinvoke r5.<javax.crypto.SealedObject: java.lang.Object getObject(javax.crypto.Cipher)>(r6)


Findings in Java Class: org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase3

	 in Method: void method1(int)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #12276d96c29952d639de5a75a5f5af3ace3b4968479958362395f8958191ed2f)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: $r11 = virtualinvoke r4.<javax.crypto.SealedObject: java.lang.Object getObject(javax.crypto.Cipher)>(r5)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #e136ff31e79b3bba5a245f55c529d52c7da477f3c35c75465952fa7127242b71)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: specialinvoke $r9.<javax.crypto.SealedObject: void <init>(java.io.Serializable,javax.crypto.Cipher)>(r3, r2)


Findings in Java Class: org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABPSCase1

	 in Method: void go(int)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #c4101e6611be1cb692394bdd20b500f6f7da35f8ae25aca56e094e8cba53e6d6)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: specialinvoke $r8.<javax.crypto.SealedObject: void <init>(java.io.Serializable,javax.crypto.Cipher)>(r4, r3)


Findings in Java Class: org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherBBCase1

	 in Method: void go()
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #7d91d631ab0784e0dde3c4ecb4d06a7df0966b23ccfcaa2783ae73986f85c6e2)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: specialinvoke $r10.<javax.crypto.SealedObject: void <init>(java.io.Serializable,javax.crypto.Cipher)>(r4, r3)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #871ec2e7332613b6c5ed2ad40434fbf27cc12ff777d6080e0577ab79ffb9cd54)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: $r12 = virtualinvoke r5.<javax.crypto.SealedObject: java.lang.Object getObject(javax.crypto.Cipher)>(r6)


Findings in Java Class: org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABMC1

	 in Method: void go(int)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #74fcc8031ac72bd164dadc1abf7a54219f4b5296f023157941b0e52562e027e3)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: specialinvoke $r10.<javax.crypto.SealedObject: void <init>(java.io.Serializable,javax.crypto.Cipher)>(r5, r3)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #5d6dd5f5ce3f647ec9ec08c65659fbbf6711461557a5b8c0b16641c92fbf52ba)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: $r12 = virtualinvoke r6.<javax.crypto.SealedObject: java.lang.Object getObject(javax.crypto.Cipher)>(r4)


Findings in Java Class: org.cryptoapi.bench.insecureasymmetriccrypto.InsecureAsymmetricCipherABICase2

	 in Method: void go(java.security.KeyPairGenerator,java.security.KeyPair)
		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #d5a38d28dc88e2f77b2ec6489b1f52cc6d663aefec384e5fc5295ef6fa4dc503)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: specialinvoke $r10.<javax.crypto.SealedObject: void <init>(java.io.Serializable,javax.crypto.Cipher)>(r4, r3)

		IncompleteOperationError violating CrySL rule for javax.crypto.Cipher (on Object #f49d0a18a0fa4007d717948fec9f3f1159969760fd5480851594d294e38af8f2)
			Operation on object of type javax.crypto.Cipher object not completed. Expected call to update, wrap, doFinal
			at statement: $r12 = virtualinvoke r5.<javax.crypto.SealedObject: java.lang.Object getObject(javax.crypto.Cipher)>(r6)


Findings in Java Class: org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABPSCase1

	 in Method: void main(java.lang.String[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r8, varReplacer9)


Findings in Java Class: org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABHCase2

	 in Method: void main(java.lang.String[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r12, varReplacer33)


Findings in Java Class: org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyBBCase1

	 in Method: void main(java.lang.String[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r5, varReplacer20)


Findings in Java Class: org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase1

	 in Method: void go(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r4, varReplacer17)


Findings in Java Class: org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyCorrected

	 in Method: void main(java.lang.String[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r9.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r15, varReplacer36)

		RequiredPredicateError violating CrySL rule for javax.crypto.Cipher
			Second parameter was not properly generated as generated Key
			at statement: virtualinvoke r5.<javax.crypto.Cipher: void init(int,java.security.Key)>(varReplacer37, r3)


Findings in Java Class: org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABMC1

	 in Method: void go(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r5, varReplacer16)


Findings in Java Class: org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase3

	 in Method: void method2(java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r4, varReplacer21)


Findings in Java Class: org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABHCase1

	 in Method: void main(java.lang.String[])
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r8, varReplacer13)


Findings in Java Class: org.cryptoapi.bench.predictablecryptographickey.PredictableCryptographicKeyABICase2

	 in Method: void go()
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r5, varReplacer7)


Findings in Java Class: org.cryptoapi.bench.predictablecryptographickey.Crypto

	 in Method: byte[] method1(java.lang.String,java.lang.String)
		RequiredPredicateError violating CrySL rule for javax.crypto.spec.SecretKeySpec
			First parameter was not properly generated as prepared Key Material
			at statement: specialinvoke $r4.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r11, $r5)


======================= CogniCrypt Summary ==========================
	Number of CrySL rules: 8
	Number of Objects Analyzed: 341

	CogniCrypt found the following violations. For details see description above.
	NeverTypeOfError: 9
	RequiredPredicateError: 31
	ConstraintError: 78
	IncompleteOperationError: 78
	TypestateError: 1
=====================================================================